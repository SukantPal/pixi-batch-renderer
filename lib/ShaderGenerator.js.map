{"version":3,"sources":["../src/ShaderGenerator.js"],"names":["_replaceAll","target","search","replacement","replace","RegExp","injectTexturesPerBatch","batchRenderer","MAX_TEXTURES","ShaderGenerator","vertexShaderTemplate","fragmentShaderTemplate","uniforms","templateInjectors","disableVertexShaderTemplate","_vertexShaderTemplate","_fragmentShaderTemplate","_uniforms","_templateInjectors","_cache","_cState","stringState","_generateInjectorBasedState","cachedShader","_generateShader","state","cState","injectorMacro","val","slice","injectorTemplate","shader","PIXI","Shader","from"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAKA,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,WAArC,EACA;AACI,SAAOF,MAAM,CAACG,OAAP,CAAe,IAAIC,MAAJ,CAAWH,MAAX,EAAmB,GAAnB,CAAf,EAAwCC,WAAxC,CAAP;AACH;;AAED,SAASG,sBAAT,CAAgCC,aAAhC,EACA;AACI,mBAAUA,aAAa,CAACC,YAAxB;AACH;;IAiBKC,e;AAaF,2BACIC,oBADJ,EAEIC,sBAFJ,EASA;AAAA,QANIC,QAMJ,uEANe,EAMf;AAAA,QALIC,iBAKJ,uEALwB;AAChB,4BAAsBP;AADN,KAKxB;AAAA,QAFIQ,2BAEJ,uEAFkC,IAElC;AAAA;;AACI,QAAI,CAACD,iBAAiB,CAAC,oBAAD,CAAtB,EACA;AACIA,MAAAA,iBAAiB,CAAC,oBAAD,CAAjB,GAA0CP,sBAA1C;AACH;;AAGD,SAAKS,qBAAL,GAA6BL,oBAA7B;AAEA,SAAKM,uBAAL,GAA+BL,sBAA/B;AAEA,SAAKM,SAAL,GAAiBL,QAAjB;AAEA,SAAKM,kBAAL,GAA0BL,iBAA1B;AAQA,SAAKC,2BAAL,GAAmCA,2BAAnC;AASA,SAAKK,MAAL,GAAc,EAAd;AASA,SAAKC,OAAL,GAAe,IAAf;AACH;;;;uCAMD;AAAA;;AACI,aAAO,UAACb,aAAD,EACP;AACI,YAAMc,WAAW,GAAG,KAAI,CAACC,2BAAL,CAAiCf,aAAjC,CAApB;;AACA,YAAMgB,YAAY,GAAG,KAAI,CAACJ,MAAL,CAAYE,WAAZ,CAArB;;AAEA,YAAIE,YAAJ,EACA;AACI,iBAAOA,YAAP;AACH;;AAED,eAAO,KAAI,CAACC,eAAL,CAAqBH,WAArB,CAAP;AACH,OAXD;AAYH;;;gDAG2Bd,a,EAC5B;AACI,UAAIkB,KAAK,GAAG,EAAZ;AACA,UAAMC,MAAM,GAAG,KAAKN,OAAL,GAAe,EAA9B;;AAEA,WAAK,IAAMO,aAAX,IAA4B,KAAKT,kBAAjC,EACA;AACI,YAAMU,GAAG,GAAG,KAAKV,kBAAL,CAAwBS,aAAxB,EAAuCpB,aAAvC,CAAZ;;AAEAkB,QAAAA,KAAK,IAAIG,GAAT;AACAF,QAAAA,MAAM,CAACC,aAAD,CAAN,GAAwBC,GAAxB;AACH;;AAED,aAAOH,KAAP;AACH;;;oCAGeJ,W,EAChB;AACI,UAAIX,oBAAoB,GAAG,KAAKK,qBAAL,CAA2Bc,KAA3B,CAAiC,CAAjC,CAA3B;;AAEA,UAAIlB,sBAAsB,GAAG,KAAKK,uBAAL,CAA6Ba,KAA7B,CAAmC,CAAnC,CAA7B;;AAEA,WAAK,IAAMC,gBAAX,IAA+B,KAAKV,OAApC,EACA;AACI,YAAI,CAAC,KAAKN,2BAAV,EACA;AACIJ,UAAAA,oBAAoB,GAAGV,WAAW,CAACU,oBAAD,EAC9BoB,gBAD8B,EACZ,KAAKV,OAAL,CAAaU,gBAAb,CADY,CAAlC;AAEH;;AAEDnB,QAAAA,sBAAsB,GAAGX,WAAW,CAACW,sBAAD,EAChCmB,gBADgC,EACd,KAAKV,OAAL,CAAaU,gBAAb,CADc,CAApC;AAEH;;AAED,UAAMC,MAAM,GAAGC,IAAI,CAACC,MAAL,CAAYC,IAAZ,CAAiBxB,oBAAjB,EACXC,sBADW,EACa,KAAKM,SADlB,CAAf;AAGA,WAAKE,MAAL,CAAYE,WAAZ,IAA2BU,MAA3B;AAEA,aAAOA,MAAP;AACH;;;;;;eAIUtB,e","sourcesContent":["import * as PIXI from 'pixi.js';\n\n// JavaScript is stupid enough not to have a replaceAll\n// in String. This is a temporary solution and we should\n// depend on an actually polyfill.\nfunction _replaceAll(target, search, replacement)\n{\n    return target.replace(new RegExp(search, 'g'), replacement);\n}\n\nfunction injectTexturesPerBatch(batchRenderer,)\n{\n    return `${batchRenderer.MAX_TEXTURES}`;\n}\n\n/**\n * Exposes an easy-to-use API for generating a shader function\n * for batch rendering.\n *\n * You are required to provide an injector map, which maps\n * macros to functions that return a string value for those\n * macros given a renderer.\n *\n * By default, only one injector is used - the textures per\n * batch `%texturesPerBatch%` macro. This is replaced by\n * the number of textures passed to the `uSamplers` textures\n * uniform.\n *\n * @memberof PIXI.brend\n */\nclass ShaderGenerator\n{\n    /**\n     * WARNING: Do not pass `uSamplers` in your uniforms. They\n     *  will be added to your shader instance directly.\n     *\n     * @param {string} vertexShaderTemplate\n     * @param {string} fragmentShaderTemplate\n     * @param {UniformGroup | Map<string, object>} uniforms\n     * @param {Object.<String, InjectorFunction>} [templateInjectors={'%texturesPerBatch%': (bRenderer) => `${bRenderer.MAX_TEXTURES}`}]\n     * @param {boolean} [disableVertexShaderTemplate=true] - turn off (true)\n     *      if you aren't using macros in the vertex shader\n     */\n    constructor(\n        vertexShaderTemplate,\n        fragmentShaderTemplate,\n        uniforms = {},\n        templateInjectors = {\n            '%texturesPerBatch%': injectTexturesPerBatch,\n        },\n        disableVertexShaderTemplate = true,\n    )\n    {\n        if (!templateInjectors['%texturesPerBatch%'])\n        {\n            templateInjectors['%texturesPerBatch%'] = injectTexturesPerBatch;\n        }\n\n        /** @protected */\n        this._vertexShaderTemplate = vertexShaderTemplate;\n        /** @protected */\n        this._fragmentShaderTemplate = fragmentShaderTemplate;\n        /** @protected */\n        this._uniforms = uniforms;\n        /** @protected */\n        this._templateInjectors = templateInjectors;\n\n        /**\n         * Disable vertex shader templates to speed up shader\n         * generation.\n         *\n         * @member {Boolean}\n         */\n        this.disableVertexShaderTemplate = disableVertexShaderTemplate;\n\n        /**\n         * Maps the stringifed state of the batch renderer to the\n         * generated shader.\n         *\n         * @private\n         * @member {Object.<String, PIXI.Shader>}\n         */\n        this._cache = {};\n\n        /**\n         * Unstringifed current state of the batch renderer.\n         *\n         * @private\n         * @member {Object.<String, String>}\n         * @see {PIXI.brend.ShaderGenerator#_generateInjectorBasedState}\n         */\n        this._cState = null;\n    }\n\n    /**\n     * @return shader function that can be given to the batch renderer\n     */\n    generateFunction()\n    {\n        return (batchRenderer) =>\n        {\n            const stringState = this._generateInjectorBasedState(batchRenderer);\n            const cachedShader = this._cache[stringState];\n\n            if (cachedShader)\n            {\n                return cachedShader;\n            }\n\n            return this._generateShader(stringState);\n        };\n    }\n\n    /** @protected */\n    _generateInjectorBasedState(batchRenderer)\n    {\n        let state = '';\n        const cState = this._cState = {};\n\n        for (const injectorMacro in this._templateInjectors)\n        {\n            const val = this._templateInjectors[injectorMacro](batchRenderer);\n\n            state += val;\n            cState[injectorMacro] = val;\n        }\n\n        return state;\n    }\n\n    /** @private */\n    _generateShader(stringState)\n    {\n        let vertexShaderTemplate = this._vertexShaderTemplate.slice(0);\n\n        let fragmentShaderTemplate = this._fragmentShaderTemplate.slice(0);\n\n        for (const injectorTemplate in this._cState)\n        {\n            if (!this.disableVertexShaderTemplate)\n            {\n                vertexShaderTemplate = _replaceAll(vertexShaderTemplate,\n                    injectorTemplate, this._cState[injectorTemplate]);\n            }\n\n            fragmentShaderTemplate = _replaceAll(fragmentShaderTemplate,\n                injectorTemplate, this._cState[injectorTemplate]);\n        }\n\n        const shader = PIXI.Shader.from(vertexShaderTemplate,\n            fragmentShaderTemplate, this._uniforms);\n\n        this._cache[stringState] = shader;\n\n        return shader;\n    }\n}\n\nexport { ShaderGenerator };\nexport default ShaderGenerator;\n\n/**\n * @function\n * @name InjectorFunction\n * @memberof PIXI.brend\n *\n * @param {PIXI.brend.BatchRenderer} batchRenderer\n * @return {string} value of the macro for this renderer\n */\n"],"file":"ShaderGenerator.js"}