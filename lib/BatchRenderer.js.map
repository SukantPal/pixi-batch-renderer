{"version":3,"sources":["../src/BatchRenderer.js"],"names":["BatchRenderer","renderer","attributeRedirects","indexProperty","vertexCountProperty","textureProperty","texturePerObject","textureAttribute","stateFunction","packer","GeometryPacker","undefined","BatchGeneratorClass","BatchGenerator","_attributeRedirects","_indexProperty","_vertexCountProperty","_textureProperty","_texturePerObject","_textureAttribute","_stateFunction","runners","contextChange","add","gl","_packer","_geom","generateCompositeGeometry","_batchGenerator","MAX_TEXTURE","_objectBuffer","_bufferedVertices","_bufferedIndices","_batchPool","_batchCount","PIXI","settings","PREFER_ENV","ENV","WEBGL_LEGACY","MAX_TEXTURES","Math","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","length","targetObject","push","batchGenerator","geom","buffer","bufferLength","reset","batchStart","objectIndex","target","wasPut","put","finalize","_newBatch","batchBuffer","textureId","Array","i","batch","batchLength","uidMap","vertexCount","indexCount","j","$vertexCount","$indexCount","tex","texUID","baseTexture","uid","_tex","k","BaseTexture","pack","geometry","bind","$buffer","update","compositeAttributeBuffer","rawBinaryData","getIndex","compositeIndicesBuffer","updateBuffers","textureBuffer","forEach","texture","state","set","drawElements","TRIANGLES","UNSIGNED_SHORT","geometryOffset","drawArrays","Batch","hasIndex","Geometry","attributeBuffer","Buffer","indexBuffer","redirect","glslIdentifer","glType","glSize","normalize","addAttribute","TYPES","UNSIGNED_FLOAT","addIndex","ObjectRenderer"],"mappings":"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","sourcesContent":["import { Batch } from './Batch';\nimport { BatchGenerator } from './BatchGenerator';\nimport { GeometryPacker } from './GeometryPacker';\nimport * as PIXI from 'pixi.js';\nimport { resolveConstantOrProperty, resolveFunctionOrProperty } from './resolve';\n\n/**\n * @memberof PIXI.brend\n */\nexport class BatchRenderer extends PIXI.ObjectRenderer\n{\n    /**\n     * @param {PIXI.Renderer} renderer - renderer to attach to\n     * @param {Array<PIXI.brend.AttributeRedirect>} attributeRedirects\n     * @param {string | null} indexProperty\n     * @param {string | number} vertexCountProperty\n     * @param {string | null} textureProperty\n     * @param {number} texturePerObject\n     * @param {string} textureAttribute - name of texture-id attribute variable\n     * @param {Function} stateFunction - returns a {PIXI.State} for an object\n     * @param {PIXI.brend.GeometryPacker} [packer=new PIXI.brend.GeometryPacker]\n     * @param {Class} [BatchGeneratorClass=PIXI.brend.BatchGenerator]\n     */\n    constructor(\n        renderer,\n        attributeRedirects,\n        indexProperty,\n        vertexCountProperty,\n        textureProperty,\n        texturePerObject,\n        textureAttribute,\n        stateFunction,\n        packer = new GeometryPacker(\n            attributeRedirects,\n            indexProperty,\n            vertexCountProperty, // auto-calculate\n            undefined,\n            texturePerObject\n        ),\n        BatchGeneratorClass = BatchGenerator\n    )\n    {\n        super(renderer);\n\n        /** @protected */\n        this._attributeRedirects = attributeRedirects;\n        /** @protected */\n        this._indexProperty = indexProperty;\n        /** @protected */\n        this._vertexCountProperty = vertexCountProperty;\n        /** @protected */\n        this._textureProperty = textureProperty;\n        /** @protected */\n        this._texturePerObject = texturePerObject;\n        /** @protected */\n        this._textureAttribute = textureAttribute;\n        /** @protected */\n        this._stateFunction = stateFunction;\n\n        this.renderer.runners.contextChange.add(this);\n\n        if (this.renderer.gl)// we are late to the party!\n        {\n            this.contextChange();\n        }\n\n        /** @protected */\n        this._packer = packer;\n\n        /** @protected */\n        this._geom = BatchRenderer.generateCompositeGeometry(\n            attributeRedirects,\n            !!indexProperty,\n            textureAttribute,\n            texturePerObject);\n\n        /** @protected */\n        this._batchGenerator = new BatchGeneratorClass(\n            texturePerObject, this.MAX_TEXTURE,\n            textureProperty, true); // NOTE: Force texture reduction\n\n        /** @protected */\n        this._objectBuffer = [];\n        /** @protected */\n        this._bufferedVertices = 0;\n        /** @protected */\n        this._bufferedIndices = 0;\n\n        /** @protected */\n        this._batchPool = [];// may contain garbage after _batchCount\n        /** @protected */\n        this._batchCount = 0;\n    }\n\n    /** @override */\n    contextChange()\n    {\n        const gl = this.renderer.gl;\n\n        if (PIXI.settings.PREFER_ENV === PIXI.ENV.WEBGL_LEGACY)\n        {\n            /** @protected */\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            this.MAX_TEXTURES = Math.min(\n                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n                PIXI.settings.SPRITE_MAX_TEXTURES);\n        }\n    }\n\n    /** @override */\n    start()\n    {\n        this._objectBuffer.length = 0;\n        this._bufferedVertices = 0;\n        this._bufferedIndices = 0;\n    }\n\n    /** @override */\n    render(targetObject)\n    {\n        this._objectBuffer.push(targetObject);\n\n        this._bufferedVertices += resolveConstantOrProperty(\n            targetObject, this._vertexCountProperty);\n\n        if (this._indexProperty)\n        {\n            this._bufferedIndices += resolveConstantOrProperty(\n                targetObject, this._indexProperty).length;\n        }\n    }\n\n    /** @override */\n    flush()\n    {\n        const {\n            _batchGenerator: batchGenerator,\n            _geom: geom,\n            _packer: packer,\n            renderer,\n            _stateFunction: stateFunction,\n            _textureProperty: textureProperty,\n            _texturePerObject: texturePerObject,\n        } = this;\n\n        const gl = renderer.gl;\n        const buffer = this._objectBuffer;\n        const bufferLength = buffer.length;\n\n        this._batchCount = 0;\n        batchGenerator.reset();\n        packer.reset(this._bufferedVertices, this._bufferedIndices);\n\n        let batchStart = 0;\n\n        // Generate batches/groups that will be drawn using just\n        // one draw call.\n        for (let objectIndex = 0; objectIndex < bufferLength;)\n        {\n            const target = buffer[objectIndex];\n            const wasPut = batchGenerator.put(target,\n                resolveFunctionOrProperty(target, stateFunction));\n\n            if (!wasPut)\n            {\n                batchGenerator.finalize(this._newBatch(batchStart));\n                batchStart = objectIndex;\n            }\n            else\n            {\n                ++objectIndex;\n            }\n        }\n\n        // Generate the last batch, if required.\n        if (this.batchGenerator.batchBuffer.length !== 0)\n        {\n            batchGenerator.finalize(this._newBatch(batchStart));\n        }\n\n        // Pack each object into the composite geometry. This is done\n        // after batching, so that texture-ids are generated.\n        let textureId = this.texturePerObject === 1\n            ? 0\n            : new Array(texturePerObject);\n\n        for (let i = 0; i < this._batchCount; i++)// loop-per(batch)\n        {\n            const batch = this._batchPool[i];\n            const batchBuffer = batch.batchBuffer;\n            const batchLength = batchBuffer.length;\n            const uidMap = batch.uidMap;\n\n            let vertexCount = 0;// eslint-disable-line\n            let indexCount = 0;\n\n            for (let j = 0; j < batchLength; j++)// loop-per(targetObject)\n            {\n                const targetObject = batchBuffer[j];\n\n                if (this._indexProperty)\n                {\n                    indexCount += resolveConstantOrProperty(\n                        targetObject, this._indexProperty).length;\n                }\n                else\n                {\n                    vertexCount += resolveConstantOrProperty(\n                        targetObject, this._vertexCountProperty);\n                }\n\n                // externally-defined properties for draw calls\n                batch.$vertexCount = vertexCount;\n                batch.$indexCount = indexCount;\n\n                const tex = targetObject[textureProperty];\n\n                let texUID;\n\n                if (texturePerObject === 1)\n                {\n                    texUID = tex.baseTexture\n                        ? tex.baseTexture.uid\n                        : tex.uid;\n\n                    textureId = uidMap[texUID];\n                }\n                else\n                {\n                    let _tex;\n\n                    for (let k = 0; k < tex.length; k++)\n                    {\n                        _tex = tex[k];\n\n                        texUID = _tex.BaseTexture\n                            ? _tex.baseTexture.uid\n                            : _tex.uid;\n\n                        textureId[k] = uidMap[texUID];\n                    }\n                }\n\n                packer.pack(targetObject, textureId);\n            }\n        }\n\n        // Upload the geometry\n        renderer.geometry.bind(geom);\n        geom.$buffer.update(packer.compositeAttributeBuffer.rawBinaryData, 0);\n        geom.getIndex().update(packer.compositeIndicesBuffer.rawBinaryData, 0);\n        renderer.geometry.updateBuffers();\n\n        // Now draw each batch\n        for (let i = 0; i < this._batchCount; i++)\n        {\n            const batch = this._batchPool[i];\n\n            batch.textureBuffer.forEach((texture, j) =>\n            {\n                renderer.texture.bind(texture, j);\n            });\n\n            renderer.state.set(batch.state);\n\n            if (this._indexProperty)\n            {\n                gl.drawElements(gl.TRIANGLES,\n                    batch.$indexCount,\n                    gl.UNSIGNED_SHORT,\n                    batch.geometryOffset);\n            }\n            else\n            {\n                gl.drawArrays(gl.TRIANGLES,\n                    batch.geometryOffset,\n                    batch.$vertexCount);\n            }\n        }\n    }\n\n    /** @private */\n    _newBatch(batchStart)\n    {\n        if (this._batchCount === this._batchPool.length)\n        {\n            const batch = new Batch(batchStart);\n\n            this._batchPool.push(batch);\n            ++this._batchCount;\n\n            return batch;\n        }\n\n        const batch = this._batchPool[this._batchCount++];\n\n        batch.reset();\n        batch.geometryOffset = batchStart;\n\n        return batch;\n    }\n\n    /** @protected */\n    static generateCompositeGeometry(attributeRedirects, hasIndex,\n        textureAttribute, texturePerObject)\n    {\n        const geom = new PIXI.Geometry();\n        const attributeBuffer = new PIXI.Buffer(null, false, false);\n        const indexBuffer = hasIndex ? new PIXI.Buffer(null, false, true) : null;\n\n        attributeRedirects.forEach((redirect) =>\n        {\n            const {\n                glslIdentifer, glType, glSize,\n                normalize,\n            } = redirect;\n\n            geom.addAttribute(glslIdentifer, attributeBuffer,\n                glSize, normalize, glType);\n        });\n\n        if (textureAttribute && texturePerObject > 0)\n        {\n            geom.addAttribute(textureAttribute, attributeBuffer,\n                texturePerObject, false, PIXI.TYPES.UNSIGNED_FLOAT);\n        }\n\n        if (hasIndex)\n        {\n            geom.addIndex(indexBuffer);\n        }\n\n        geom.$buffer = attributeBuffer;\n\n        // $buffer is attributeBuffer\n        // getIndex() is ?indexBuffer\n        return geom;\n    }\n}\n\nexport default BatchRenderer;\n"],"file":"BatchRenderer.js"}