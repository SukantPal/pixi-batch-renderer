{"version":3,"file":"pixi-batch-renderer.min.js","sources":["../src/redirects/Redirect.ts","../src/redirects/AttributeRedirect.ts","../src/BatchGenerator.ts","../src/Batch.ts","../src/BatchGeometryFactory.ts","../src/resolve/resolveConstantOrProperty.ts","../src/resolve/resolveFunctionOrProperty.ts","../src/BatchRenderer.ts","../src/ShaderGenerator.ts","../src/BatchRendererPluginFactory.ts"],"sourcesContent":["import * as PIXI from 'pixi.js';\n\n/**\n * Redirects are used to aggregate the resources needed by the WebGL pipeline to render\n * a display-object. This includes the base primitives (geometry), uniforms, and\n * textures (which are handled as \"special\" uniforms).\n *\n * @memberof PIXI.brend\n * @class\n * @abstract\n * @see PIXI.brend.AttributeRedirect\n */\nexport abstract class Redirect\n{\n    public source: string | ((displayObject: PIXI.DisplayObject) => any);\n    public glslIdentifer: string;\n\n    constructor(source: string | ((displayObject: PIXI.DisplayObject) => any), glslIdentifer: string)\n    {\n        /**\n         * The property on the display-object that holds the resource.\n         *\n         * Instead of a property, you can provide a callback that generates the resource\n         * on invokation.\n         *\n         * @member {string | Function}\n         */\n        this.source = source;\n\n        /**\n         * The shader variable that references the resource, e.g. attribute or uniform\n         * name.\n         * @member {string}\n         */\n        this.glslIdentifer = glslIdentifer;\n    }\n}\n\nexport default Redirect;\n","import * as PIXI from 'pixi.js';\nimport { Redirect } from './Redirect';\n\n/**\n * This redirect defines an attribute of a display-object's geometry. The attribute\n * data is expected to be stored in a `PIXI.ViewableBuffer`, in an array, or (if\n * just one element) as the property itself.\n *\n * @memberof PIXI.brend\n * @class\n * @extends PIXI.brend.Redirect\n * @example\n * // This attribute redirect calculates the tint used on top of a texture. Since the\n * // tintMode can change anytime, it is better to use a derived source (function).\n * //\n * // Furthermore, the color is uploaded as four bytes (`attribute vec4 aTint`) while the\n * // source returns an integer. This is done by splitting the 32-bit integer into four\n * // 8-bit bytes.\n * new PIXI.brend.AttributeRedirect(\n *     (tgt: ExampleDisplay) => (tgt.alpha < 1.0 && tgt.tintMode === PREMULTIPLY)\n *          ? premultiplyTint(tgt.rgb, tgt.alpha)\n *          : tgt.rgb + (tgt.alpha << 24);\n *     'aTint',\n *     'int32',\n *     '%notarray%',\n *     PIXI.TYPES.UNSIGNED_BYTE,\n *     4,\n *     true\n * );\n */\nexport class AttributeRedirect extends Redirect\n{\n    public type: string;\n    public size: number | '%notarray%';\n    public glType: PIXI.TYPES;\n    public glSize: number;\n    public normalize: boolean;\n\n    public properSize: number;\n\n    /**\n     * @param {string | Function} source - redirect source\n     * @param {string} glslIdentifer - shader attribute variable\n     * @param {string}[type='float32'] - the type of data stored in the source\n     * @param {number | '%notarray%'}[size=0] - size of the source array ('%notarray' if not an array & just one element)\n     * @param {PIXI.TYPES}[glType=PIXI.TYPES.FLOAT] - data format to be uploaded in\n     * @param {number} glSize - number of elements to be uploaded as (size of source and upload must match)\n     * @param {boolean}[normalize=false] - whether to normalize the data before uploading\n     */\n    constructor(\n        source: string | ((db: PIXI.DisplayObject) => any),\n        glslIdentifer: string,\n        type = 'float32',\n        size: number | '%notarray%' = 0,\n        glType = PIXI.TYPES.FLOAT,\n        glSize: number,\n        normalize = false,\n    )\n    {\n        super(source, glslIdentifer);\n\n        /**\n         * The type of data stored in the source buffer. This can be any of: `int8`, `uint8`,\n         * `int16`, `uint16`, `int32`, `uint32`, or (by default) `float32`.\n         *\n         * @member {string}\n         * @see [PIXI.ViewableBuffer#view]{@link https://pixijs.download/dev/docs/PIXI.ViewableBuffer.html}\n         * @default 'float32'\n         */\n        this.type = type;\n\n        /**\n         * Number of elements to extract out of `source` with\n         * the given view type, for one vertex.\n         *\n         * If source isn't an array (only one element), then\n         * you can set this to `'%notarray%'`.\n         *\n         * @member {number | '%notarray%'}\n         */\n        this.size = size;\n\n        /**\n         * This is equal to `size` or 1 if size is `%notarray%`.\n         *\n         * @member {number}\n         */\n        this.properSize = (size === '%notarray%') ? 1 : size;\n\n        /**\n         * Type of attribute, when uploading.\n         *\n         * Normally, you would use the corresponding type for\n         * the view on source. However, to speed up uploads\n         * you can aggregate attribute values in larger data\n         * types. For example, an RGBA vec4 (byte-sized channels)\n         * can be represented as one `Uint32`, while having\n         * a `glType` of `UNSIGNED_BYTE`.\n         *\n         * @member {PIXI.TYPES}\n         */\n        this.glType = glType;\n\n        /**\n         * Size of attribute in terms of `glType`.\n         *\n         * Note that `glSize * glType <= size * type`\n         *\n         * @readonly\n         */\n        this.glSize = glSize;\n\n        /**\n         * Whether to normalize the attribute values.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        this.normalize = normalize;\n    }\n\n    static vertexSizeFor(attributeRedirects: Array<AttributeRedirect>): number\n    {\n        return attributeRedirects.reduce(\n            (acc, redirect) =>\n                (PIXI.ViewableBuffer.sizeOf(redirect.type)\n                    * redirect.properSize)\n                + acc,\n            0);\n    }\n}\n","import { Batch } from './Batch';\n\n/**\n * Used to generate discrete groups/batches of display-objects\n * that can be drawn together. It also keeps a parallel buffer\n * of textures.\n *\n * This class ensures that the WebGL states are equivalent and\n * the texture count doesn't become greater than the no. of\n * texture registers on the GPU. You can extend it and add\n * constraints by overriding `onPut`.\n *\n * WARNING: `BatchRenderer` does not support geometry\n *              packing with texture reduction disabled.\n *\n * @memberof PIXI.brend\n * @class\n */\nclass BatchGenerator\n{\n    public readonly enableTextureReduction: boolean;\n\n    protected _state: PIXI.State;\n    protected _textureIncrement: number;\n    protected _textureLimit: number;\n    protected _textureProperty: number;\n    /** @internal */\n    public _batchBuffer: Array<PIXI.DisplayObject>;\n    protected _textureBuffer: any;\n    protected _textureBufferLength: number;\n    protected _textureIndexedBuffer: Array<PIXI.BaseTexture>;\n    protected _textureIndexMap: any;\n\n    protected _putTexture: any;\n\n    /**\n     * @param {number} textureIncrement - textures per object\n     * @param {number} textureLimit - no. of texture registers in GPU\n     * @param {string} textureProperty - property where texture is kept\n     * @param {boolean} [enableTextureReduction=true] - whether same textures\n     *      aren't counted multiple times. This reduces draw calls and can\n     *      draw huge amounts of objects at the same time. For example,\n     *      if 1000 objects use the same texture, then they can be drawn\n     *      together. Further more if 1000 object use the same 8 textures\n     *      randomly, then they can be drawn together. (provided other\n     *      constraints like state are satisfied.)\n     */\n    constructor(\n        textureIncrement,\n        textureLimit,\n        textureProperty,\n        enableTextureReduction = true,\n    )\n    {\n        /** @private */\n        this._state = null;\n        /** @private */\n        this._textureIncrement = textureIncrement;\n        /** @private */\n        this._textureLimit = textureLimit;\n        /** @private */\n        this._textureProperty = textureProperty;\n        /** @private */\n        this._batchBuffer = [];\n        /** @private */\n        this._textureBuffer = {}; // uid : texture map\n        /** @private */\n        this._textureBufferLength = 0;\n        /** @private */\n        this._textureIndexedBuffer = []; // array of textures\n        /** @private */\n        this._textureIndexMap = {}; // uid : index in above\n        /** @protected */\n        this.enableTextureReduction = enableTextureReduction;\n\n        // this._putTexture is used to handle texture buffering!\n        if (enableTextureReduction)\n        {\n            if (textureIncrement === 1)\n            {\n                /** @private */\n                this._putTexture = this._putOnlyTexture;\n            }\n            else\n            {\n                this._putTexture = this._putTextureArray;\n            }\n        }\n        else if (textureIncrement === 1)\n        {\n            this._putTexture = this._putTextureWithoutReduction;\n        }\n        else\n        {\n            this._putTexture = this._putTextureArrayWithoutReduction;\n        }\n    }\n\n    /**\n     * Overridable method that is called before an object\n     * is put into this batch. It should check compatibility\n     * with other objects, and return true/false accordingly.\n     *\n     * @param targetObject {PIXI.DisplayObject} - object being added\n     * @protected\n     */\n    onPut(targetObject: PIXI.DisplayObject): boolean // eslint-disable-line @typescript-eslint/no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Put an object into this batch.\n     *\n     * @param targetObject {PIXI.DisplayObject} - object to add\n     * @param state {PIXI.State} - state required by that object\n     * @return {boolean} whether the object was added to the\n     *     batch. If it wasn't, you should finalize it.\n     */\n    put(targetObject: PIXI.DisplayObject, state: PIXI.State): boolean\n    {\n        if (!this._state)\n        {\n            this._state = state;\n        }\n        else if (this._state.data !== state.data)\n        {\n            return false;\n        }\n\n        if (!this.onPut(targetObject))\n        {\n            return false;\n        }\n\n        if (this._textureIncrement > 0\n            && !this._putTexture(targetObject[this._textureProperty]))\n        {\n            return false;\n        }\n\n        this._batchBuffer.push(targetObject);\n\n        return true;\n    }\n\n    /**\n     * Finalize this batch by getting its data into a\n     * `Batch` object.\n     *\n     * @param batch {PIXI.brend.Batch}\n     */\n    finalize(batch: Batch): void\n    {\n        batch.batchBuffer = this._batchBuffer;\n        batch.textureBuffer = this._textureIndexedBuffer;\n        batch.uidMap = this.enableTextureReduction\n            ? this._textureIndexMap : null;\n        batch.state = this._state;\n\n        this._state = null;\n        this._batchBuffer = [];\n        this._textureBuffer = {};\n        this._textureIndexMap = {};\n        this._textureBufferLength = 0;\n        this._textureIndexedBuffer = [];\n    }\n\n    _putOnlyTexture(texture: PIXI.Texture): boolean\n    {\n        if (texture.baseTexture)\n        {\n            texture = texture.baseTexture;\n        }\n\n        const baseTexture: PIXI.BaseTexture = texture as PIXI.BaseTexture;\n\n        if (this._textureBuffer[baseTexture.uid])\n        {\n            return true;\n        }\n        else if (this._textureBufferLength + 1 <= this._textureLimit)\n        {\n            this._textureBuffer[baseTexture.uid] = texture;\n            this._textureBufferLength += 1;\n\n            const newLength = this._textureIndexedBuffer.push(baseTexture);\n            const index = newLength - 1;\n\n            this._textureIndexMap[baseTexture.uid] = index;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    _putTextureArray(textureArray: Array<PIXI.Texture>): boolean\n    {\n        let deltaBufferLength = 0;\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            const texture = textureArray[i].baseTexture\n                ? textureArray[i].baseTexture\n                : textureArray[i];\n\n            if (!this._textureBuffer[texture.uid])\n            {\n                ++deltaBufferLength;\n            }\n        }\n\n        if (deltaBufferLength + this._textureBufferLength > this._textureLimit)\n        {\n            return false;\n        }\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            const texture = textureArray[i].baseTexture\n                ? textureArray[i].baseTexture\n                : textureArray[i];\n\n            if (!this._textureBuffer[texture.uid])\n            {\n                this._textureBuffer[texture.uid] = texture;\n                this._textureBufferLength += 1;\n\n                const newLength = this._textureIndexedBuffer.push(texture);\n                const index = newLength - 1;\n\n                this._textureIndexMap[texture.uid] = index;\n            }\n        }\n\n        return true;\n    }\n\n    _putTextureWithoutReduction(texture: PIXI.BaseTexture): boolean\n    {\n        if (texture.baseTexture)\n        {\n            texture = texture.baseTexture;\n        }\n\n        if (this._textureBufferLength + 1 > this._textureLimit)\n        {\n            return false;\n        }\n\n        this._textureIndexedBuffer.push(texture);\n\n        return true;\n    }\n\n    _putTextureArrayWithoutReduction(textureArray: Array<PIXI.Texture>): boolean\n    {\n        if (this._textureBufferLength + textureArray.length\n            > this._textureLimit)\n        {\n            return false;\n        }\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            this._textureIndexedBuffer.push(\n                textureArray[i].baseTexture\n                    ? textureArray[i].baseTexture\n                    : textureArray[i],\n            );\n        }\n\n        return true;\n    }\n}\n\nexport { BatchGenerator };\n\nexport default BatchGenerator;\n","import * as PIXI from 'pixi.js';\n\n/**\n * Resources that need to be uploaded to WebGL to render\n * one batch.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class Batch\n{\n    geometryOffset: number;\n    uidMap: Map<number, number>;\n    state: PIXI.State;\n\n    batchBuffer: Array<PIXI.DisplayObject>;\n    textureBuffer: Array<PIXI.BaseTexture>;\n\n    constructor(geometryOffset: number)\n    {\n        /**\n         * Offset in the geometry (set by `BatchRenderer`)\n         * where this batch is located.\n         *\n         * @member {number}\n         */\n        this.geometryOffset = geometryOffset;\n\n        /**\n         * Buffer of textures that should be uploaded in-order\n         * to GPU texture registers.\n         *\n         * @member {Array<PIXI.Texture>}\n         */\n        this.textureBuffer = null;\n\n        /**\n         * Map of texture-ids into texture-buffer indices.\n         *\n         * @member {Map<number, number>}\n         */\n        this.uidMap = null;\n\n        /**\n         * State required to render this batch.\n         *\n         * @member {PIXI.State}\n         */\n        this.state = null;\n    }\n\n    /**\n     * Uploads the resources required before rendering this\n     * batch.\n     */\n    upload(renderer: PIXI.Renderer): void\n    {\n        this.textureBuffer.forEach((tex, i) =>\n        {\n            renderer.texture.bind(tex, i);\n        });\n\n        renderer.state.set(this.state);\n    }\n\n    /**\n     * Resets all properties to `null` to free up references\n     * to resources.\n     */\n    reset(): void\n    {\n        this.textureBuffer\n            = this.uidMap\n                = this.state\n                    = null;\n    }\n}\n","import { AttributeRedirect } from './redirects/AttributeRedirect';\nimport * as PIXI from 'pixi.js';\nimport Redirect from './redirects/Redirect';\n\n// BatchGeometryFactory uses this class internally to setup the attributes of\n// the batches.\nexport class BatchGeometry extends PIXI.Geometry\n{\n    // Interleaved attribute data buffer\n    attribBuffer: PIXI.Buffer;\n\n    // Batched indicies\n    indexBuffer: PIXI.Buffer;\n\n    constructor(attributeRedirects: AttributeRedirect[],\n        hasIndex: boolean,\n        textureAttribute: string,\n        texturePerObject: number,\n    )\n    {\n        super();\n\n        const attributeBuffer = new PIXI.Buffer(null, false, false);\n        const indexBuffer = hasIndex ? new PIXI.Buffer(null, false, true) : null;\n\n        attributeRedirects.forEach((redirect) =>\n        {\n            const { glslIdentifer, glType, glSize, normalize } = redirect;\n\n            this.addAttribute(glslIdentifer, attributeBuffer, glSize, normalize, glType);\n        });\n\n        if (textureAttribute && texturePerObject > 0)\n        {\n            this.addAttribute(textureAttribute, attributeBuffer, texturePerObject, true, PIXI.TYPES.FLOAT);\n        }\n\n        if (hasIndex)\n        {\n            this.addIndex(indexBuffer);\n        }\n\n        this.attribBuffer = attributeBuffer;\n        this.indexBuffer = indexBuffer;\n    }\n}\n\nexport interface IBatchGeometryFactory\n{\n    init(verticesBatched: number, indiciesBatched: number): void;\n    append(displayObject: number, inBatchId: number): void;\n    build(): PIXI.Geometry;\n    release(geom: PIXI.Geometry): void;\n}\n\n/**\n * This interface defines the methods you need to implement to creating your own batch\n * geometry factory.\n * @memberof PIXI.brend\n * @interface IBatchGeometryFactory\n */\n\n/**\n * Called before the batch renderer starts feeding the display-objects. This can be used\n * to pre-allocated space for the batch geometry.\n *\n * @memberof PIXI.brend.IBatchGeometryFactory#\n * @method init\n * @param {number} verticesBatched\n * @param {number}[indiciesBatched] - optional when display-object's don't use a index buffer\n */\n\n/**\n * Adds the display-object to the batch geometry. If the display-object's shader also uses\n * uniforms (or textures in `uSamplers` uniform), then it will also be given an in-batch\n * ID. This id is used to fetch the corresponding uniform for the \"current\" display-object\n * from an array. `inBatchId` is passed as an attribute `vTextureId`.\n *\n * @memberof PIXI.brend.IBatchGeometryFactory#\n * @method append\n * @param {PIXI.DisplayObject} displayObject\n * @param {number} inBatchId\n */\n\n/**\n * This should wrap up the batch geometry in a `PIXI.Geometry` object.\n *\n * @memberof PIXI.brend.IBatchGeometryFactory#\n * @method build\n * @returns {PIXI.Geometry} batch geometry\n */\n\n/**\n * This is used to return a batch geometry so it can be pooled and reused in a future `build()`\n * call.\n *\n * @memberof PIXI.brend.IBatchGeometryFactory#\n * @method release\n * @param {PIXI.Geometry} geom\n */\n\n/**\n * Factory class that generates the geometry for a whole batch by feeding on\n * the individual display-object geometries. This factory is reusable, i.e. you\n * can build another geometry after a {@link build} call.\n *\n * **Optimizations:** To speed up geometry generation, this compiles an optimized\n * packing function that pushes attributes without looping through the attribute\n * redirects.\n *\n * **Default Format:** If you are not using a custom draw-call issuer, then\n * the batch geometry must have an interleaved attribute data buffer and one\n * index buffer.\n *\n * **Customization:** If you want to customize the batch geometry, then you must\n * also define your draw call issuer. This is not supported by pixi-batch-render\n * but is work-in-progress.\n *\n * @memberof PIXI.brend\n * @class\n * @implements PIXI.brend.IBatchGeometryFactory\n */\nexport class BatchGeometryFactory\n{\n    _targetCompositeAttributeBuffer: PIXI.ViewableBuffer;\n    _targetCompositeIndexBuffer: Uint16Array;\n    _aIndex: number;\n    _iIndex: number;\n\n    _attribRedirects: AttributeRedirect[];\n    _indexProperty: string;\n    _vertexCountProperty: string | number;\n    _vertexSize: number;\n    _texturePerObject: number;\n\n    textureId: number;\n\n    protected _aBuffers: PIXI.ViewableBuffer[];\n    protected _iBuffers: Uint16Array[];\n\n    protected _geometryPool: Array<PIXI.Geometry>;\n\n    _geometryMerger: (displayObject: PIXI.DisplayObject, factory: BatchGeometryFactory) => void;\n\n    /**\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string} indexProperty - property where indicies are kept; null/undefined if not required.\n     * @param {string | number} vertexCountProperty - property where no. of vertices for each object\n     *  are kept. This could also be a constant.\n     * @param {number} vertexSize - vertex size, calculated by default. This should exclude the vertex attribute\n     * @param {number} texturePerObject - no. of textures per object\n     */\n    constructor(\n        attribRedirects: AttributeRedirect[],\n        indexProperty: string,\n        vertexCountProperty: string | number,\n        vertexSize = AttributeRedirect.vertexSizeFor(attribRedirects),\n        texturePerObject: number)\n    {\n        vertexSize += texturePerObject * 4;// texture indices are also passed\n\n        this._targetCompositeAttributeBuffer = null;\n        this._targetCompositeIndexBuffer = null;\n        this._aIndex = 0;\n        this._iIndex = 0;\n\n        this._attribRedirects = attribRedirects;\n        this._indexProperty = indexProperty;\n        this._vertexCountProperty = vertexCountProperty;\n        this._vertexSize = vertexSize;\n        this._texturePerObject = texturePerObject;\n\n        this._aBuffers = [];// @see _getAttributeBuffer\n        this._iBuffers = [];// @see _getIndexBuffer\n\n        /**\n         * Batch geometries that can be reused.\n         *\n         * @member {PIXI.Geometry}\n         * @protected\n         * @see PIXI.brend.IBatchGeometryFactory#release\n         */\n        this._geometryPool = [];\n    }\n\n    /**\n     * This is the currently active composite attribute\n     * buffer. It may contain garbage in unused locations.\n     *\n     * @member {PIXI.ViewableBuffer}\n     */\n    get compositeAttributes(): PIXI.ViewableBuffer\n    {\n        return this._targetCompositeAttributeBuffer;\n    }\n\n    /**\n     * This is the currently active composite index\n     * buffer. It may contain garbage in unused locations.\n     *\n     * It will be `null` if `indexProperty` was not given.\n     *\n     * @member {Uint16Array}\n     */\n    get compositeIndices(): Uint16Array\n    {\n        return this._targetCompositeIndexBuffer;\n    }\n\n    /**\n     * Ensures this factory has enough space to buffer the given number of vertices\n     * and indices. This should be called before feeding display-objects from the\n     * batch.\n     *\n     * @param {number} verticesBatched\n     * @param {number} indiciesBatched\n     */\n    init(verticesBatched: number, indiciesBatched?: number): void\n    {\n        this._targetCompositeAttributeBuffer = this.getAttributeBuffer(verticesBatched);\n\n        if (this._indexProperty)\n        {\n            this._targetCompositeIndexBuffer = this.getIndexBuffer(indiciesBatched);\n        }\n\n        this._aIndex = this._iIndex = 0;\n    }\n\n    /**\n     * Append's the display-object geometry to this batch's geometry.\n     *\n     * @param {PIXI.DisplayObject} targetObject\n     * @param {number} textureId\n     */\n    append(targetObject: PIXI.DisplayObject, textureId: number): void\n    {\n        this.textureId = textureId;\n        this.geometryMerger(targetObject, this);\n    }\n\n    /**\n     * @override\n     * @returns {PIXI.Geometry} the generated batch geometry\n     */\n    build(): PIXI.Geometry\n    {\n        const geom: BatchGeometry = (this._geometryPool.pop() || new BatchGeometry(\n            this._attribRedirects, true, 'aInBatchID', this._texturePerObject)) as BatchGeometry;\n\n        // We don't really have to remove the buffers because BatchRenderer won't reuse\n        // the data in these buffers after the next build() call.\n        geom.attribBuffer.update(this._targetCompositeAttributeBuffer.rawBinaryData);\n        geom.indexBuffer.update(this._targetCompositeIndexBuffer);\n\n        return geom;\n    }\n\n    /**\n     * @param {PIXI.Geometry} geom - releases back the geometry to be reused. It is expected\n     *  that it is not used externally again.\n     * @override\n     */\n    release(geom: PIXI.Geometry): void\n    {\n        this._geometryPool.push(geom);\n    }\n\n    /**\n     * This lazy getter returns the geometry-merger function. This function\n     * takes one argument - the display-object to be appended to the batch -\n     * and pushes its geometry to the batch geometry.\n     *\n     * You can overwrite this property with a custom geometry-merger function\n     * if customizing `PIXI.brend.BatchGeometryFactory`.\n     *\n     * @member {PIXI.brend#IGeometryMerger}\n     */\n    protected get geometryMerger(): (displayObject: PIXI.DisplayObject, factory: BatchGeometryFactory) => void\n    {\n        if (!this._geometryMerger)\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            this._geometryMerger = new GeometryMergerFactory(this).compile();\n        }\n\n        return this._geometryMerger;\n    }\n    // eslint-disable-next-line require-jsdoc\n    protected set geometryMerger(func: (displayObject: PIXI.DisplayObject, factory: BatchGeometryFactory) => void)\n    {\n        this._geometryMerger = func;\n    }\n\n    /**\n     * Allocates an attribute buffer with sufficient capacity to hold `size` elements.\n     *\n     * @param {number} size\n     * @protected\n     */\n    protected getAttributeBuffer(size: number): PIXI.ViewableBuffer\n    {\n        // 8 vertices is enough for 2 quads\n        const roundedP2 = PIXI.utils.nextPow2(Math.ceil(size / 8));\n        const roundedSizeIndex = PIXI.utils.log2(roundedP2);\n        const roundedSize = roundedP2 * 8;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._aBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer\n                = new PIXI.ViewableBuffer(roundedSize * this._vertexSize);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Allocates an index buffer (`Uint16Array`) with sufficient capacity to hold `size` indices.\n     *\n     * @param size\n     * @protected\n     */\n    protected getIndexBuffer(size: number): Uint16Array\n    {\n        // 12 indices is enough for 2 quads\n        const roundedP2 = PIXI.utils.nextPow2(Math.ceil(size / 12));\n        const roundedSizeIndex = PIXI.utils.log2(roundedP2);\n        const roundedSize = roundedP2 * 12;\n\n        if (this._iBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._iBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._iBuffers[roundedSizeIndex] = buffer\n                = new Uint16Array(roundedSize);\n        }\n\n        return buffer;\n    }\n}\n\n// GeometryMergerFactory uses these variable names.\nconst CompilerConstants = {\n    INDICES_OFFSET: '__offset_indices_',\n    FUNC_SOURCE_BUFFER: 'getSourceBuffer',\n\n    // Argument names for the geometryMerger() function.\n    packerArguments: [\n        'targetObject',\n        'factory',\n    ],\n};\n\n// This was intended to be an inner class of BatchGeometryFactory; however, due to\n// a bug in JSDoc, it was placed outside.\n// https://github.com/jsdoc/jsdoc/issues/1673\n\n// Factory for generating a geometry-merger function (which appends the geometry of\n// a display-object to the batch geometry).\nconst GeometryMergerFactory = class\n{\n    packer: BatchGeometryFactory;\n\n    // We need the BatchGeometryFactory for attribute redirect information.\n    constructor(packer: BatchGeometryFactory)\n    {\n        this.packer = packer;\n    }\n\n    compile(): (displayObject: PIXI.DisplayObject, factory: BatchGeometryFactory) => void\n    {\n        const packer = this.packer;\n\n        // The function's body/code is placed here.\n        let packerBody = ``;\n\n        // Define __offset_${i}, the offset of each attribute in the display-object's\n        // geometry, __buffer_${i} the source buffer of the attribute data.\n        packer._attribRedirects.forEach((redirect, i) =>\n        {\n            packerBody += `\n                let __offset_${i} = 0;\n                const __buffer_${i} = (\n                    ${this._compileSourceBufferExpression(redirect, i)});\n            `;\n        });\n\n        // This loops through each vertex in the display-object's geometry and appends\n        // them (attributes are interleaved, so each attribute element is pushed per vertex)\n        packerBody += `\n            const compositeAttributes = factory._targetCompositeAttributeBuffer;\n            const compositeIndices = factory._targetCompositeIndexBuffer;\n            const aIndex = factory._aIndex;\n            const iIndex = factory._iIndex;\n            const textureId = factory.textureId;\n            const attributeRedirects = factory.attributeRedirects;\n\n            const {\n                int8View,\n                uint8View,\n                int16View,\n                uint16View,\n                int32View,\n                uint32View,\n                float32View,\n            } = compositeAttributes;\n\n            const vertexCount = ${this._compileVertexCountExpression()};\n\n            let adjustedAIndex = 0;\n\n            for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex++)\n            {\n        `;\n\n        // Eliminate offset conversion when adjacent attributes\n        // have similar source-types.\n        let skipReverseTransformation = false;\n\n        // Appends a vertice's attributes (inside the for-loop above).\n        for (let i = 0; i < packer._attribRedirects.length; i++)\n        {\n            const redirect = packer._attribRedirects[i];\n\n            /* Initialize adjsutedAIndex in terms of source type. */\n            if (!skipReverseTransformation)\n            {\n                packerBody += `\n                    adjustedAIndex = aIndex / ${this._sizeOf(i)};\n                `;\n            }\n\n            if (typeof redirect.size === 'number')\n            {\n                for (let j = 0; j < redirect.size; j++)\n                {\n                    packerBody += `\n                        ${redirect.type}View[adjustedAIndex++] =\n                            __buffer_${i}[__offset_${i}++];\n                    `;\n                }\n            }\n            else\n            {\n                packerBody += `\n                        ${redirect.type}View[adjustedAIndex++] =\n                            __buffer_${i};\n                `;\n            }\n\n            if (packer._attribRedirects[i + 1]\n                && (this._sizeOf(i + 1) !== this._sizeOf(i)))\n            {\n                packerBody += `\n                    aIndex = adjustedAIndex * ${this._sizeOf(i)};\n                `;\n            }\n            else\n            {\n                skipReverseTransformation = true;\n            }\n        }\n\n        if (skipReverseTransformation)\n        {\n            if (this._sizeOf(packer._attribRedirects.length - 1)\n                    !== 4)\n            {\n                packerBody += `\n                    aIndex = adjustedAIndex * ${this._sizeOf(\n        packer._attribRedirects.length - 1)}\n                `;\n                skipReverseTransformation = false;\n            }\n        }\n\n        if (packer._texturePerObject > 0)\n        {\n            if (packer._texturePerObject > 1)\n            {\n                if (!skipReverseTransformation)\n                {\n                    packerBody += `\n                        adjustedAIndex = aIndex / 4;\n                    `;\n                }\n\n                for (let k = 0; k < packer._texturePerObject; k++)\n                {\n                    packerBody += `\n                        float32View[adjustedAIndex++] = textureId[${k}];\n                    `;\n                }\n\n                packerBody += `\n                    aIndex = adjustedAIndex * 4;\n                `;\n            }\n            else if (!skipReverseTransformation)\n            {\n                packerBody += `\n                    float32View[aIndex] = textureId;\n                    aIndex += 4;\n                `;\n            }\n            else\n            {\n                packerBody += `\n                    float32View[adjustedAIndex++] = textureId;\n                    aIndex = adjustedAIndex * 4;\n                `;\n            }\n        }\n\n        /* Close the packing for-loop. */\n        packerBody += `}\n            ${this.packer._indexProperty\n        ? `const oldAIndex = this._aIndex;`\n        : ''}\n            this._aIndex = aIndex;\n        `;\n\n        if (this.packer._indexProperty)\n        {\n            packerBody += `\n                const verticesBefore = oldAIndex / ${this.packer._vertexSize}\n                const indexCount\n                    = targetObject['${this.packer._indexProperty}'].length;\n\n                for (let j = 0; j < indexCount; j++)\n                {\n                    compositeIndices[iIndex++] = verticesBefore +\n                        targetObject['${this.packer._indexProperty}'][j];\n                }\n\n                this._iIndex = iIndex;\n            `;\n        }\n\n        // eslint-disable-next-line no-new-func\n        return new Function(\n            ...CompilerConstants.packerArguments,\n            packerBody) as\n        (displayObject: PIXI.DisplayObject, factory: BatchGeometryFactory) => void;\n    }\n\n    // Returns an expression that fetches the attribute data source from\n    // targetObject (DisplayObject).\n    _compileSourceBufferExpression(redirect: Redirect, i: number): string\n    {\n        return (typeof redirect.source === 'string')\n            ? `targetObject['${redirect.source}']`\n            : `attributeRedirects[${i}].source(targetObject)`;\n    }\n\n    _compileVertexCountExpression(): string\n    {\n        if (!this.packer._vertexCountProperty)\n        {\n            // auto-calculate based on primary attribute\n            return `__buffer_0.length / ${\n                this.packer._attribRedirects[0].size}`;\n        }\n\n        return (\n            (typeof this.packer._vertexCountProperty === 'string')\n                ? `targetObject.${this.packer._vertexCountProperty}`\n                : `${this.packer._vertexCountProperty}`\n        );\n    }\n\n    _sizeOf(i: number): number\n    {\n        return PIXI.ViewableBuffer.sizeOf(\n            this.packer._attribRedirects[i].type);\n    }\n};\n\nexport default BatchGeometryFactory;\n","import * as PIXI from 'pixi.js';\n\nexport function resolveConstantOrProperty(targetObject: PIXI.DisplayObject, property: string | number): any\n{\n    return (typeof property === 'string')\n        ? targetObject[property]\n        : property;\n}\n\nexport default resolveConstantOrProperty;\n","import * as PIXI from 'pixi.js';\n\nexport function resolveFunctionOrProperty(targetObject: PIXI.DisplayObject, property: Function | string): any\n{\n    return (typeof property === 'string')\n        ? targetObject[property]\n        : property(targetObject);\n}\n\nexport default resolveFunctionOrProperty;\n","import { Batch } from './Batch';\nimport { BatchGenerator } from './BatchGenerator';\nimport { BatchGeometryFactory } from './BatchGeometryFactory';\nimport * as PIXI from 'pixi.js';\nimport { resolveConstantOrProperty, resolveFunctionOrProperty } from './resolve';\nimport { AttributeRedirect } from './redirects/AttributeRedirect';\n\n/**\n * This object renderer renders multiple display-objects in batches. It can greatly\n * reduce the number of draw calls issued per frame.\n *\n * ## Batch Rendering Pipeline\n *\n * The batch rendering pipeline consists of the following stages:\n *\n * * **Display-object buffering**: Each display-object is kept in a buffer until it fills\n * up or a flush is required.\n *\n * * **Geometry compositing**: The geometries of each display-object are merged together\n * in one interleaved composite geometry.\n *\n * * **Batch accumulation**: In a sliding window, display-object batches are generated based\n * off of certain constraints like GPU texture units and the uniforms used in each display-object.\n *\n * * **Rendering**: Each batch is rendered in-order using `gl.draw*`. The textures and\n * uniforms of each display-object are uploaded as arrays.\n *\n * ## Shaders\n *\n * ### Shader templates\n *\n * Since the max. display-object count per batch is not known until the WebGL context is created,\n * shaders are generated at runtime by processing shader templates. A shader templates has \"%macros%\"\n * that are replaced by constants at runtime.\n *\n * ### Textures\n *\n * The batch renderer uploads textures in the `uniform sampler2D uSamplers[%texturesPerBatch%];`. The\n * `varying float vTextureId` defines the index into this array that holds the current display-object's\n * texture.\n *\n * ### Uniforms\n *\n * This renderer currently does not support customized uniforms for display-objects. This is a\n * work-in-progress feature.\n *\n * ## Learn more\n * This batch renderer uses the PixiJS object-renderer API to hook itself:\n *\n * 1. [PIXI.ObjectRenderer]{@link http://pixijs.download/release/docs/PIXI.ObjectRenderer.html}\n *\n * 2. [PIXI.AbstractBatchRenderer]{@link http://pixijs.download/release/docs/PIXI.AbstractBatchRenderer.html}\n *\n * @memberof PIXI.brend\n * @class\n * @extends PIXI.ObjectRenderer\n * @example\n * import * as PIXI from 'pixi.js';\n * import { BatchRendererPluginFactory } from 'pixi-batch-renderer';\n *\n * // Define the geometry of your display-object and create a BatchRenderer using\n * // BatchRendererPluginFactory. Register it as a plugin with PIXI.Renderer.\n * PIXI.Renderer.registerPlugin('ExampleBatchRenderer', BatchRendererPluginFactory.from(...));\n *\n * class ExampleObject extends PIXI.Container\n * {\n *     _render(renderer: PIXI.Renderer): void\n *     {\n *          // BatchRenderer will handle the whole rendering process for you!\n *          renderer.batch.setObjectRenderer(renderer.plugins['ExampleBatchRenderer']);\n *          renderer.plugins['ExampleBatchRenderer'].render(this);\n *     }\n * }\n */\nexport class BatchRenderer extends PIXI.ObjectRenderer\n{\n    _attributeRedirects: AttributeRedirect[];\n    _indexProperty: string;\n    _vertexCountProperty: string | number;\n    _textureProperty: string;\n    _texturePerObject: number;\n    _textureAttribute: string;\n    _stateFunction: Function;\n    _shaderFunction: Function;\n\n    _BatchGeneratorClass: typeof BatchGenerator;\n    _batchGenerator: BatchGenerator;\n\n    _geometryFactory: BatchGeometryFactory;\n    _geom: PIXI.Geometry;\n\n    _objectBuffer: PIXI.DisplayObject[];\n    _bufferedVertices: number;\n    _bufferedIndices: number;\n\n    _shader: PIXI.Shader;\n\n    _batchPool: Array<Batch>;\n    _batchCount: number;\n\n    MAX_TEXTURES: number;\n\n    /**\n     * Creates a batch renderer the renders display-objects with the described\n     * geometry.\n     *\n     * To register a batch-renderer plugin, you must use the API provided by\n     * `PIXI.brend.BatchRendererPluginFactory`.\n     *\n     * @param {PIXI.Renderer} renderer - renderer to attach to\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string | null} indexProperty\n     * @param {string | number} vertexCountProperty\n     * @param {string | null} textureProperty\n     * @param {number} texturePerObject\n     * @param {string} textureAttribute - name of texture-id attribute variable\n     * @param {Function} stateFunction - returns a {PIXI.State} for an object\n     * @param {Function} shaderFunction - generates a shader given this instance\n     * @param {PIXI.brend.GeometryPacker} [packer=new PIXI.brend.GeometryPacker]\n     * @param {Class} [BatchGeneratorClass=PIXI.brend.BatchGenerator]\n     * @see PIXI.brend.ShaderGenerator\n     */\n    constructor(// eslint-disable-line max-params\n        renderer: PIXI.Renderer,\n        attributeRedirects: AttributeRedirect[],\n        indexProperty: string,\n        vertexCountProperty: string | number,\n        textureProperty: string,\n        texturePerObject: number,\n        textureAttribute: string,\n        stateFunction: (renderer: BatchRenderer) => PIXI.State,\n        shaderFunction: (renderer: BatchRenderer) => PIXI.Shader,\n        packer = new BatchGeometryFactory(\n            attributeRedirects,\n            indexProperty,\n            vertexCountProperty, // auto-calculate\n            undefined,\n            texturePerObject,\n        ),\n        BatchGeneratorClass = BatchGenerator,\n    )\n    {\n        super(renderer);\n\n        this._attributeRedirects = attributeRedirects;\n        this._indexProperty = indexProperty;\n        this._vertexCountProperty = vertexCountProperty;\n        this._textureProperty = textureProperty;\n        this._texturePerObject = texturePerObject;\n        this._textureAttribute = textureAttribute;\n        this._stateFunction = stateFunction;\n        this._shaderFunction = shaderFunction;\n\n        this._BatchGeneratorClass = BatchGeneratorClass;\n        this._batchGenerator = null;// @see this#contextChange\n\n        // Although the runners property is not a public API, it is required to\n        // handle contextChange events.\n        this.renderer.runners.contextChange.add(this);\n\n        // If the WebGL context has already been created, initialization requires a\n        // syntheic call to contextChange.\n        if (this.renderer.gl)\n        {\n            this.contextChange();\n        }\n\n        this._geometryFactory = packer;\n\n        this._geom = BatchRenderer.generateCompositeGeometry(\n            attributeRedirects,\n            !!indexProperty,\n            textureAttribute,\n            texturePerObject);\n\n        this._objectBuffer = [];\n        this._bufferedVertices = 0;\n        this._bufferedIndices = 0;\n        this._shader = null;\n\n        this._batchPool = [];// may contain garbage after _batchCount\n        this._batchCount = 0;\n    }\n\n    /**\n     * Internal method that is called whenever the renderer's WebGL context changes.\n     */\n    contextChange(): void\n    {\n        const gl = this.renderer.gl;\n\n        if (PIXI.settings.PREFER_ENV === PIXI.ENV.WEBGL_LEGACY)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            this.MAX_TEXTURES = Math.min(\n                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n                PIXI.settings.SPRITE_MAX_TEXTURES);\n        }\n\n        this._batchGenerator = new this._BatchGeneratorClass(\n            this._texturePerObject, this.MAX_TEXTURES,\n            this._textureProperty, true); // NOTE: Force texture reduction\n\n        if (!this._batchGenerator.enableTextureReduction)\n        {\n            throw new Error('PIXI.brend.BatchRenderer does not support '\n                    + 'batch generation without texture reduction enabled.');\n        }\n    }\n\n    /**\n     * This is an internal method. It ensures that the batch renderer is ready\n     * to start buffering display-objects. This is automatically invoked by the\n     * renderer's batch system.\n     *\n     * @override\n     */\n    start(): void\n    {\n        this._objectBuffer.length = 0;\n        this._bufferedVertices = 0;\n        this._bufferedIndices = 0;\n\n        this._shader = this._shaderFunction(this);\n\n        if (this._shader.uniforms.uSamplers)\n        {\n            this._shader.uniforms.uSamplers\n                = BatchRenderer.generateTextureArray(this.MAX_TEXTURES);\n        }\n\n        this.renderer.shader.bind(this._shader, false);\n    }\n\n    /**\n     * Adds the display-object to be rendered in a batch.\n     *\n     * @param {PIXI.DisplayObject} displayObject\n     * @override\n     */\n    render(displayObject: PIXI.DisplayObject): void\n    {\n        this._objectBuffer.push(displayObject);\n\n        this._bufferedVertices += this._vertexCountFor(displayObject);\n\n        if (this._indexProperty)\n        {\n            this._bufferedIndices += resolveConstantOrProperty(\n                displayObject, this._indexProperty).length;\n        }\n    }\n\n    /**\n     * Forces buffered display-objects to be rendered immediately. This should not\n     * be called unless absolutely necessary like the following scenarios:\n     *\n     * * before directly rendering your display-object, to preserve render-order.\n     *\n     * * to do a nested render pass (calling `Renderer#render` inside a `render` method)\n     *   because the PixiJS renderer is not re-entrant.\n     *\n     * @override\n     */\n    flush(): void\n    {\n        const {\n            _batchGenerator: batchGenerator,\n            _geom: geom,\n            _geometryFactory: geometryFactory,\n            renderer,\n            _stateFunction: stateFunction,\n            _textureProperty: textureProperty,\n            _texturePerObject: texturePerObject,\n        } = this;\n\n        const gl = renderer.gl;\n        const buffer = this._objectBuffer;\n        const bufferLength = buffer.length;\n\n        this._batchCount = 0;\n        geometryFactory.init(this._bufferedVertices, this._bufferedIndices);\n\n        let batchStart = 0;\n\n        // Loop through display-objects and create batches\n        for (let objectIndex = 0; objectIndex < bufferLength;)\n        {\n            const target = buffer[objectIndex];\n            const wasPut = batchGenerator.put(target,\n                resolveFunctionOrProperty(target, stateFunction));\n\n            if (!wasPut)\n            {\n                batchGenerator.finalize(this._newBatch(batchStart));\n                batchStart = objectIndex;\n            }\n            else\n            {\n                ++objectIndex;\n            }\n        }\n\n        // Generate the last batch, if required.\n        if (batchGenerator._batchBuffer.length !== 0)\n        {\n            batchGenerator.finalize(this._newBatch(batchStart));\n        }\n\n        // Pack each object into the composite geometry. This is done\n        // after batching, so that texture-ids are generated.\n        let textureId = this._texturePerObject === 1\n            ? 0\n            : new Array(texturePerObject);\n\n        for (let i = 0; i < this._batchCount; i++)// loop-per(batch)\n        {\n            const batch = this._batchPool[i];\n            const batchBuffer = batch.batchBuffer;\n            const batchLength = batchBuffer.length;\n            const uidMap = batch.uidMap;\n\n            let vertexCount = 0;// eslint-disable-line\n            let indexCount = 0;\n\n            for (let j = 0; j < batchLength; j++)// loop-per(targetObject)\n            {\n                const targetObject = batchBuffer[j];\n\n                if (this._indexProperty)\n                {\n                    indexCount += resolveConstantOrProperty(\n                        targetObject, this._indexProperty).length;\n                }\n                else\n                {\n                    vertexCount += resolveConstantOrProperty(\n                        targetObject, this._vertexCountProperty);\n                }\n\n                // externally-defined properties for draw calls\n                batch.$vertexCount = vertexCount;\n                batch.$indexCount = indexCount;\n\n                const tex = targetObject[textureProperty];\n\n                let texUID;\n\n                if (texturePerObject === 1)\n                {\n                    texUID = tex.baseTexture\n                        ? tex.baseTexture.uid\n                        : tex.uid;\n\n                    textureId = uidMap[texUID];\n                }\n                else\n                {\n                    let _tex;\n\n                    for (let k = 0; k < tex.length; k++)\n                    {\n                        _tex = tex[k];\n\n                        texUID = _tex.BaseTexture\n                            ? _tex.baseTexture.uid\n                            : _tex.uid;\n\n                        textureId[k] = uidMap[texUID];\n                    }\n                }\n\n                geometryFactory.append(targetObject, textureId);\n            }\n        }\n\n        // Upload the geometry\n        geom.$buffer.update(geometryFactory.compositeAttributes.float32View);\n        geom.getIndex().update(geometryFactory.compositeIndices);\n        renderer.geometry.bind(geom);\n        renderer.geometry.updateBuffers();\n\n        // Now draw each batch\n        for (let i = 0; i < this._batchCount; i++)\n        {\n            const batch = this._batchPool[i];\n\n            batch.upload();\n\n            if (this._indexProperty)\n            {\n                gl.drawElements(gl.TRIANGLES,\n                    batch.$indexCount,\n                    gl.UNSIGNED_SHORT,\n                    batch.geometryOffset * 2);// * 2 cause Uint16 indices\n            }\n            else\n            {\n                gl.drawArrays(gl.TRIANGLES,\n                    batch.geometryOffset,\n                    batch.$vertexCount);// TODO: *vertexSize\n            }\n\n            batch.reset();\n        }\n    }\n\n    /**\n     * Internal method that stops buffering of display-objects and flushes any existing\n     * buffers.\n     *\n     * @override\n     */\n    stop(): void\n    {\n        if (this._bufferedVertices)\n        {\n            this.flush();\n        }\n    }\n\n    protected _newBatch(batchStart: number): Batch\n    {\n        if (this._batchCount === this._batchPool.length)\n        {\n            const batch = new Batch(batchStart);\n\n            this._batchPool.push(batch);\n            ++this._batchCount;\n\n            return batch;\n        }\n\n        const batch = this._batchPool[this._batchCount++];\n\n        batch.reset();\n        batch.geometryOffset = batchStart;\n\n        return batch;\n    }\n\n    protected _vertexCountFor(targetObject: PIXI.DisplayObject): number\n    {\n        return (this._vertexCountProperty)\n            ? resolveConstantOrProperty(targetObject, this._vertexCountProperty)\n            : resolveFunctionOrProperty(targetObject,\n                this._attributeRedirects[0].source).length\n                    / (this._attributeRedirects[0].size as number);\n    }\n\n    /**\n     * Constructs an interleaved geometry that can be used to upload a whole buffer\n     * of display-object primitives at once.\n     *\n     * @private\n     * @param {Array<PIXI.brend.AttributeRedirect>} attributeRedirects\n     * @param {boolean} hasIndex - whether to include an index property\n     * @param {string} textureAttribute - name of the texture-id attribute\n     * @param {number} texturePerObject - no. of textures per object\n     */\n    static generateCompositeGeometry(\n        attributeRedirects: AttributeRedirect[],\n        hasIndex: boolean,\n        textureAttribute: string,\n        texturePerObject: number,\n    ): PIXI.Geometry\n    {\n        const geom = new PIXI.Geometry();\n        const attributeBuffer = new PIXI.Buffer(null, false, false);\n        const indexBuffer = hasIndex ? new PIXI.Buffer(null, false, true) : null;\n\n        attributeRedirects.forEach((redirect) =>\n        {\n            const {\n                glslIdentifer, glType, glSize,\n                normalize,\n            } = redirect;\n\n            geom.addAttribute(glslIdentifer, attributeBuffer,\n                glSize, normalize, glType);\n        });\n\n        if (textureAttribute && texturePerObject > 0)\n        {\n            geom.addAttribute(textureAttribute, attributeBuffer,\n                texturePerObject, true, PIXI.TYPES.FLOAT);\n        }\n\n        if (hasIndex)\n        {\n            geom.addIndex(indexBuffer);\n        }\n\n        geom.$buffer = attributeBuffer;\n\n        // $buffer is attributeBuffer\n        // getIndex() is ?indexBuffer\n        return geom;\n    }\n\n    /**\n     * @private\n     * @param {number} count\n     */\n    static generateTextureArray(count: number): Int32Array\n    {\n        const array = new Int32Array(count);\n\n        for (let i = 0; i < count; i++)\n        {\n            array[i] = i;\n        }\n\n        return array;\n    }\n}\n\nexport default BatchRenderer;\n","import * as PIXI from 'pixi.js';\nimport BatchRenderer from './BatchRenderer';\n\n// JavaScript is stupid enough not to have a replaceAll\n// in String. This is a temporary solution and we should\n// depend on an actually polyfill.\nfunction _replaceAll(target: string, search: string, replacement: string): string\n{\n    return target.replace(new RegExp(search, 'g'), replacement);\n}\n\nfunction injectTexturesPerBatch(batchRenderer: BatchRenderer): string\n{\n    return `${batchRenderer.MAX_TEXTURES}`;\n}\n\n/**\n * Exposes an easy-to-use API for generating a shader function\n * for batch rendering.\n *\n * You are required to provide an injector map, which maps\n * macros to functions that return a string value for those\n * macros given a renderer.\n *\n * By default, only one injector is used - the textures per\n * batch `%texturesPerBatch%` macro. This is replaced by\n * the number of textures passed to the `uSamplers` textures\n * uniform.\n *\n * @memberof PIXI.brend\n * @class\n */\nclass ShaderGenerator\n{\n    protected _vertexShaderTemplate: string;\n    protected _fragmentShaderTemplate: string;\n    protected _uniforms: any;\n    protected _templateInjectors: any;\n\n    protected disableVertexShaderTemplate: boolean;\n\n    protected _cache: any;\n    protected _cState: any;\n\n    /**\n     * WARNING: Do not pass `uSamplers` in your uniforms. They\n     *  will be added to your shader instance directly.\n     *\n     * @param {string} vertexShaderTemplate\n     * @param {string} fragmentShaderTemplate\n     * @param {UniformGroup | Map<string, object>} uniforms\n     * @param {Object.<String, PIXI.brend.InjectorFunction>} [templateInjectors]\n     * @param {boolean} [disableVertexShaderTemplate=true] - turn off (true)\n     *      if you aren't using macros in the vertex shader\n     */\n    constructor(\n        vertexShaderTemplate: string,\n        fragmentShaderTemplate: string,\n        uniforms = {},\n        templateInjectors = {\n            '%texturesPerBatch%': injectTexturesPerBatch,\n        },\n        disableVertexShaderTemplate = true,\n    )\n    {\n        if (!templateInjectors['%texturesPerBatch%'])\n        {\n            templateInjectors['%texturesPerBatch%'] = injectTexturesPerBatch;\n        }\n\n        /** @protected */\n        this._vertexShaderTemplate = vertexShaderTemplate;\n        /** @protected */\n        this._fragmentShaderTemplate = fragmentShaderTemplate;\n        /** @protected */\n        this._uniforms = uniforms;\n        /** @protected */\n        this._templateInjectors = templateInjectors;\n\n        /**\n         * Disable vertex shader templates to speed up shader\n         * generation.\n         *\n         * @member {Boolean}\n         */\n        this.disableVertexShaderTemplate = disableVertexShaderTemplate;\n\n        /**\n         * Maps the stringifed state of the batch renderer to the\n         * generated shader.\n         *\n         * @private\n         * @member {Object.<String, PIXI.Shader>}\n         */\n        this._cache = {};\n\n        /**\n         * Unstringifed current state of the batch renderer.\n         *\n         * @private\n         * @member {Object.<String, String>}\n         * @see {PIXI.brend.ShaderGenerator#_generateInjectorBasedState}\n         */\n        this._cState = null;\n    }\n\n    /**\n     * @return shader function that can be given to the batch renderer\n     */\n    generateFunction(): (brend: BatchRenderer) => PIXI.Shader\n    {\n        return (batchRenderer: BatchRenderer): PIXI.Shader =>\n        {\n            const stringState = this._generateInjectorBasedState(batchRenderer);\n            const cachedShader = this._cache[stringState];\n\n            if (cachedShader)\n            {\n                return cachedShader;\n            }\n\n            return this._generateShader(stringState);\n        };\n    }\n\n    protected _generateInjectorBasedState(batchRenderer: BatchRenderer): string\n    {\n        let state = '';\n        const cState = this._cState = {};\n\n        for (const injectorMacro in this._templateInjectors)\n        {\n            const val = this._templateInjectors[injectorMacro](batchRenderer);\n\n            state += val;\n            cState[injectorMacro] = val;\n        }\n\n        return state;\n    }\n\n    protected _generateShader(stringState: string): PIXI.Shader\n    {\n        let vertexShaderTemplate = this._vertexShaderTemplate.slice(0);\n\n        let fragmentShaderTemplate = this._fragmentShaderTemplate.slice(0);\n\n        for (const injectorTemplate in this._cState)\n        {\n            if (!this.disableVertexShaderTemplate)\n            {\n                vertexShaderTemplate = _replaceAll(vertexShaderTemplate,\n                    injectorTemplate, this._cState[injectorTemplate]);\n            }\n\n            fragmentShaderTemplate = _replaceAll(fragmentShaderTemplate,\n                injectorTemplate, this._cState[injectorTemplate]);\n        }\n\n        const shader = PIXI.Shader.from(vertexShaderTemplate,\n            fragmentShaderTemplate, this._uniforms);\n\n        this._cache[stringState] = shader;\n\n        return shader;\n    }\n}\n\nexport { ShaderGenerator };\nexport default ShaderGenerator;\n","import { BatchRenderer } from './BatchRenderer';\nimport { AttributeRedirect } from './redirects/AttributeRedirect';\nimport BatchGeometryFactory from './BatchGeometryFactory';\nimport BatchGenerator from './BatchGenerator';\n\n/**\n * Factory class for creating a batch-renderer.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class BatchRendererPluginFactory\n{\n    /**\n     * Generates a fully customized `BatchRenderer` that aggregates primitives\n     * and textures. This is useful for non-uniform based display-objects.\n     *\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string | Array<number>} indexProperty\n     * @param {string | number} vertexCountProperty\n     * @param {string} textureProperty\n     * @param {number} texturePerObject\n     * @param {string} textureAttribute\n     * @param {Function} stateFunction\n     * @param {Function} shaderFunction\n     * @param {PIXI.brend.GeometryPacker} [packer]\n     * @param {Class} [BatchGeneratorClass]\n     * @param {Class} [BatchRendererClass]\n     * @static\n     */\n    static from(/* eslint-disable-line max-params */\n        attributeRedirects: AttributeRedirect[],\n        indexProperty: string,\n        vertexCountProperty: string | number,\n        textureProperty: string,\n        texturePerObject: number,\n        textureAttribute: string,\n        stateFunction: (brend: BatchRenderer) => any,\n        shaderFunction: (brend: BatchRenderer) => any,\n        packer: BatchGeometryFactory,\n        BatchGeneratorClass: typeof BatchGenerator,\n        BatchRendererClass = BatchRenderer,\n    ): typeof BatchRenderer\n    {\n        return class extends BatchRendererClass\n        {\n            constructor(renderer: PIXI.Renderer)\n            {\n                super(renderer,\n                    attributeRedirects,\n                    indexProperty,\n                    vertexCountProperty,\n                    textureProperty,\n                    texturePerObject,\n                    textureAttribute,\n                    stateFunction,\n                    shaderFunction,\n                    packer,\n                    BatchGeneratorClass);\n            }\n        };\n    }\n}\n\nexport default BatchRendererPluginFactory;\n"],"names":["Redirect","[object Object]","source","glslIdentifer","this","AttributeRedirect","type","size","glType","PIXI.TYPES","FLOAT","glSize","normalize","super","properSize","attributeRedirects","reduce","acc","redirect","PIXI.ViewableBuffer","sizeOf","BatchGenerator","textureIncrement","textureLimit","textureProperty","enableTextureReduction","_state","_textureIncrement","_textureLimit","_textureProperty","_batchBuffer","_textureBuffer","_textureBufferLength","_textureIndexedBuffer","_textureIndexMap","_putTexture","_putOnlyTexture","_putTextureArray","_putTextureWithoutReduction","_putTextureArrayWithoutReduction","targetObject","state","data","onPut","push","batch","batchBuffer","textureBuffer","uidMap","texture","baseTexture","uid","index","textureArray","deltaBufferLength","i","length","Batch","geometryOffset","renderer","forEach","tex","bind","set","BatchGeometry","PIXI.Geometry","hasIndex","textureAttribute","texturePerObject","attributeBuffer","PIXI.Buffer","indexBuffer","addAttribute","addIndex","attribBuffer","BatchGeometryFactory","attribRedirects","indexProperty","vertexCountProperty","vertexSize","vertexSizeFor","_targetCompositeAttributeBuffer","_targetCompositeIndexBuffer","_aIndex","_iIndex","_attribRedirects","_indexProperty","_vertexCountProperty","_vertexSize","_texturePerObject","_aBuffers","_iBuffers","_geometryPool","compositeAttributes","compositeIndices","verticesBatched","indiciesBatched","getAttributeBuffer","getIndexBuffer","textureId","geometryMerger","geom","pop","update","rawBinaryData","_geometryMerger","GeometryMergerFactory","compile","func","roundedP2","PIXI.utils","nextPow2","Math","ceil","roundedSizeIndex","log2","roundedSize","buffer","Uint16Array","CompilerConstants","INDICES_OFFSET","FUNC_SOURCE_BUFFER","packerArguments","packer","packerBody","_compileSourceBufferExpression","_compileVertexCountExpression","skipReverseTransformation","_sizeOf","j","k","Function","resolveConstantOrProperty","property","resolveFunctionOrProperty","BatchRenderer","PIXI.ObjectRenderer","stateFunction","shaderFunction","undefined","BatchGeneratorClass","_attributeRedirects","_textureAttribute","_stateFunction","_shaderFunction","_BatchGeneratorClass","_batchGenerator","runners","contextChange","add","gl","_geometryFactory","_geom","generateCompositeGeometry","_objectBuffer","_bufferedVertices","_bufferedIndices","_shader","_batchPool","_batchCount","PIXI.settings","PREFER_ENV","PIXI.ENV","WEBGL_LEGACY","MAX_TEXTURES","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","Error","uniforms","uSamplers","generateTextureArray","shader","displayObject","_vertexCountFor","batchGenerator","geometryFactory","bufferLength","init","batchStart","objectIndex","target","put","finalize","_newBatch","Array","batchLength","vertexCount","indexCount","$vertexCount","$indexCount","texUID","_tex","BaseTexture","append","$buffer","float32View","getIndex","geometry","updateBuffers","upload","drawElements","TRIANGLES","UNSIGNED_SHORT","drawArrays","reset","flush","count","array","Int32Array","_replaceAll","search","replacement","replace","RegExp","injectTexturesPerBatch","batchRenderer","BatchRendererClass","vertexShaderTemplate","fragmentShaderTemplate","templateInjectors","%texturesPerBatch%","disableVertexShaderTemplate","_vertexShaderTemplate","_fragmentShaderTemplate","_uniforms","_templateInjectors","_cache","_cState","stringState","_generateInjectorBasedState","cachedShader","_generateShader","cState","injectorMacro","val","slice","injectorTemplate","PIXI.Shader","from"],"mappings":"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"}