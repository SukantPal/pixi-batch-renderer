{"version":3,"file":"pixi-batch-renderer.min.js","sources":["../node_modules/tslib/tslib.es6.js","../src/redirects/Redirect.ts","../src/redirects/AttributeRedirect.ts","../src/BatchGenerator.ts","../src/Batch.ts","../src/GeometryPacker.ts","../src/resolve/resolveConstantOrProperty.ts","../src/resolve/resolveFunctionOrProperty.ts","../src/BatchRenderer.ts","../src/BatchRendererPluginFactory.ts","../src/ShaderGenerator.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * A redirect is used to transfer data from the display\n * object to the shader program.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class Redirect\n{\n    public source: string | Function;\n    public glslIdentifer: string;\n\n    constructor(source: string | Function, glslIdentifer: string)\n    {\n        /**\n         * Source property on a `PIXI.DisplayObject` that\n         * holds the data being transferred. This can also\n         * be a callback that returns the data.\n         *\n         * @member {string | Function}\n         */\n        this.source = source;\n\n        /**\n         * GLSL variable that will hold the data.\n         *\n         * @member {string}\n         */\n        this.glslIdentifer = glslIdentifer;\n    }\n}\n\nexport default Redirect;\n","import * as PIXI from 'pixi.js';\nimport { Redirect } from './Redirect';\n\n/**\n * An attribute-redirect describes how the batch renderer will\n * aggregate shader attributes.\n *\n * @memberof PIXI.brend\n * @class\n * @extends PIXI.brend.Redirect\n */\nexport class AttributeRedirect extends Redirect\n{\n    public source: string | Function;\n    public glslIdentifer: string;\n    public type: string;\n    public size: number | '%notarray%';\n    public glType: PIXI.TYPES;\n    public glSize: number;\n    public normalize: boolean;\n\n    public properSize: number;\n\n    constructor(source: string | Function, glslIdentifer: string,\n        type = 'float32', size: number | '%notarray%' = 0,\n        glType = PIXI.TYPES.FLOAT, glSize: number,\n        normalize = false)\n    {\n        super(source, glslIdentifer);\n\n        /**\n         * View on the source buffer that should be used to\n         * extract data.\n         *\n         * @member {string}\n         * @see PIXI.ViewableBuffer#view\n         */\n        this.type = type;\n\n        /**\n         * Number of elements to extract out of `source` with\n         * the given view type, for one vertex.\n         *\n         * If source isn't an array (only one element), then\n         * you can set this to `'%notarray%'`.\n         *\n         * @member {number | '%notarray%'}\n         */\n        this.size = size;\n\n        /**\n         * This is equal to `size` or 1 if size is `%notarray%`.\n         *\n         * @member {number}\n         */\n        this.properSize = (size === '%notarray%') ? 1 : size;\n\n        /**\n         * Type of attribute, when uploading.\n         *\n         * Normally, you would use the corresponding type for\n         * the view on source. However, to speed up uploads\n         * you can aggregate attribute values in larger data\n         * types. For example, an RGBA vec4 (byte-sized channels)\n         * can be represented as one `Uint32`, while having\n         * a `glType` of `UNSIGNED_BYTE`.\n         *\n         * @member {PIXI.TYPES}\n         */\n        this.glType = glType;\n\n        /**\n         * Size of attribute in terms of `glType`.\n         *\n         * Note that `glSize * glType <= size * type`\n         *\n         * @readonly\n         */\n        this.glSize = glSize;\n\n        /**\n         * Whether to normalize the attribute values.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        this.normalize = normalize;\n    }\n\n    static vertexSizeFor(attributeRedirects: Array<AttributeRedirect>): number\n    {\n        return attributeRedirects.reduce(\n            (acc, redirect) =>\n                (PIXI.ViewableBuffer.sizeOf(redirect.type)\n                    * redirect.properSize)\n                + acc,\n            0);\n    }\n}\n","import { Batch } from './Batch';\n\n/**\n * Used to generate discrete groups/batches of display-objects\n * that can be drawn together. It also keeps a parallel buffer\n * of textures.\n *\n * This class ensures that the WebGL states are equivalent and\n * the texture count doesn't become greater than the no. of\n * texture registers on the GPU. You can extend it and add\n * constraints by overriding `onPut`.\n *\n * WARNING: `BatchRenderer` does not support geometry\n *              packing with texture reduction disabled.\n *\n * @memberof PIXI.brend\n * @class\n */\nclass BatchGenerator\n{\n    public readonly enableTextureReduction: boolean;\n\n    protected _state: PIXI.State;\n    protected _textureIncrement: number;\n    protected _textureLimit: number;\n    protected _textureProperty: number;\n    /** @internal */\n    public _batchBuffer: Array<PIXI.DisplayObject>;\n    protected _textureBuffer: any;\n    protected _textureBufferLength: number;\n    protected _textureIndexedBuffer: Array<PIXI.BaseTexture>;\n    protected _textureIndexMap: any;\n\n    protected _putTexture: any;\n\n    /**\n     * @param {number} textureIncrement - textures per object\n     * @param {number} textureLimit - no. of texture registers in GPU\n     * @param {string} textureProperty - property where texture is kept\n     * @param {boolean} [enableTextureReduction=true] - whether same textures\n     *      aren't counted multiple times. This reduces draw calls and can\n     *      draw huge amounts of objects at the same time. For example,\n     *      if 1000 objects use the same texture, then they can be drawn\n     *      together. Further more if 1000 object use the same 8 textures\n     *      randomly, then they can be drawn together. (provided other\n     *      constraints like state are satisfied.)\n     */\n    constructor(\n        textureIncrement,\n        textureLimit,\n        textureProperty,\n        enableTextureReduction = true,\n    )\n    {\n        /** @private */\n        this._state = null;\n        /** @private */\n        this._textureIncrement = textureIncrement;\n        /** @private */\n        this._textureLimit = textureLimit;\n        /** @private */\n        this._textureProperty = textureProperty;\n        /** @private */\n        this._batchBuffer = [];\n        /** @private */\n        this._textureBuffer = {}; // uid : texture map\n        /** @private */\n        this._textureBufferLength = 0;\n        /** @private */\n        this._textureIndexedBuffer = []; // array of textures\n        /** @private */\n        this._textureIndexMap = {}; // uid : index in above\n        /** @protected */\n        this.enableTextureReduction = enableTextureReduction;\n\n        // this._putTexture is used to handle texture buffering!\n        if (enableTextureReduction)\n        {\n            if (textureIncrement === 1)\n            {\n                /** @private */\n                this._putTexture = this._putOnlyTexture;\n            }\n            else\n            {\n                this._putTexture = this._putTextureArray;\n            }\n        }\n        else if (textureIncrement === 1)\n        {\n            this._putTexture = this._putTextureWithoutReduction;\n        }\n        else\n        {\n            this._putTexture = this._putTextureArrayWithoutReduction;\n        }\n    }\n\n    /**\n     * Overridable method that is called before an object\n     * is put into this batch. It should check compatibility\n     * with other objects, and return true/false accordingly.\n     *\n     * @param targetObject {PIXI.DisplayObject} - object being added\n     * @protected\n     */\n    onPut(targetObject: PIXI.DisplayObject): boolean // eslint-disable-line @typescript-eslint/no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Put an object into this batch.\n     *\n     * @param targetObject {PIXI.DisplayObject} - object to add\n     * @param state {PIXI.State} - state required by that object\n     * @return {boolean} whether the object was added to the\n     *     batch. If it wasn't, you should finalize it.\n     */\n    put(targetObject: PIXI.DisplayObject, state: PIXI.State): boolean\n    {\n        if (!this._state)\n        {\n            this._state = state;\n        }\n        else if (this._state.data !== state.data)\n        {\n            return false;\n        }\n\n        if (!this.onPut(targetObject))\n        {\n            return false;\n        }\n\n        if (this._textureIncrement > 0\n            && !this._putTexture(targetObject[this._textureProperty]))\n        {\n            return false;\n        }\n\n        this._batchBuffer.push(targetObject);\n\n        return true;\n    }\n\n    /**\n     * Finalize this batch by getting its data into a\n     * `Batch` object.\n     *\n     * @param batch {PIXI.brend.Batch}\n     */\n    finalize(batch: Batch): void\n    {\n        batch.batchBuffer = this._batchBuffer;\n        batch.textureBuffer = this._textureIndexedBuffer;\n        batch.uidMap = this.enableTextureReduction\n            ? this._textureIndexMap : null;\n        batch.state = this._state;\n\n        this._state = null;\n        this._batchBuffer = [];\n        this._textureBuffer = {};\n        this._textureIndexMap = {};\n        this._textureBufferLength = 0;\n        this._textureIndexedBuffer = [];\n    }\n\n    _putOnlyTexture(texture: PIXI.Texture): boolean\n    {\n        if (texture.baseTexture)\n        {\n            texture = texture.baseTexture;\n        }\n\n        const baseTexture: PIXI.BaseTexture = texture as PIXI.BaseTexture;\n\n        if (this._textureBuffer[baseTexture.uid])\n        {\n            return true;\n        }\n        else if (this._textureBufferLength + 1 <= this._textureLimit)\n        {\n            this._textureBuffer[baseTexture.uid] = texture;\n            this._textureBufferLength += 1;\n\n            const newLength = this._textureIndexedBuffer.push(baseTexture);\n            const index = newLength - 1;\n\n            this._textureIndexMap[baseTexture.uid] = index;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    _putTextureArray(textureArray: Array<PIXI.Texture>): boolean\n    {\n        let deltaBufferLength = 0;\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            const texture = textureArray[i].baseTexture\n                ? textureArray[i].baseTexture\n                : textureArray[i];\n\n            if (!this._textureBuffer[texture.uid])\n            {\n                ++deltaBufferLength;\n            }\n        }\n\n        if (deltaBufferLength + this._textureBufferLength > this._textureLimit)\n        {\n            return false;\n        }\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            const texture = textureArray[i].baseTexture\n                ? textureArray[i].baseTexture\n                : textureArray[i];\n\n            if (!this._textureBuffer[texture.uid])\n            {\n                this._textureBuffer[texture.uid] = texture;\n                this._textureBufferLength += 1;\n\n                const newLength = this._textureIndexedBuffer.push(texture);\n                const index = newLength - 1;\n\n                this._textureIndexMap[texture.uid] = index;\n            }\n        }\n\n        return true;\n    }\n\n    _putTextureWithoutReduction(texture: PIXI.BaseTexture): boolean\n    {\n        if (texture.baseTexture)\n        {\n            texture = texture.baseTexture;\n        }\n\n        if (this._textureBufferLength + 1 > this._textureLimit)\n        {\n            return false;\n        }\n\n        this._textureIndexedBuffer.push(texture);\n\n        return true;\n    }\n\n    _putTextureArrayWithoutReduction(textureArray: Array<PIXI.Texture>): boolean\n    {\n        if (this._textureBufferLength + textureArray.length\n            > this._textureLimit)\n        {\n            return false;\n        }\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            this._textureIndexedBuffer.push(\n                textureArray[i].baseTexture\n                    ? textureArray[i].baseTexture\n                    : textureArray[i],\n            );\n        }\n\n        return true;\n    }\n}\n\nexport { BatchGenerator };\n\nexport default BatchGenerator;\n","import * as PIXI from 'pixi.js';\n\n/**\n * Resources that need to be uploaded to WebGL to render\n * one batch.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class Batch\n{\n    geometryOffset: number;\n    uidMap: Map<number, number>;\n    state: PIXI.State;\n\n    batchBuffer: Array<PIXI.DisplayObject>;\n    textureBuffer: Array<PIXI.BaseTexture>;\n\n    constructor(geometryOffset: number)\n    {\n        /**\n         * Offset in the geometry (set by `BatchRenderer`)\n         * where this batch is located.\n         *\n         * @member {number}\n         */\n        this.geometryOffset = geometryOffset;\n\n        /**\n         * Buffer of textures that should be uploaded in-order\n         * to GPU texture registers.\n         *\n         * @member {Array<PIXI.Texture>}\n         */\n        this.textureBuffer = null;\n\n        /**\n         * Map of texture-ids into texture-buffer indices.\n         *\n         * @member {Map<number, number>}\n         */\n        this.uidMap = null;\n\n        /**\n         * State required to render this batch.\n         *\n         * @member {PIXI.State}\n         */\n        this.state = null;\n    }\n\n    /**\n     * Uploads the resources required before rendering this\n     * batch.\n     */\n    upload(renderer: PIXI.Renderer): void\n    {\n        this.textureBuffer.forEach((tex, i) =>\n        {\n            renderer.texture.bind(tex, i);\n        });\n\n        renderer.state.set(this.state);\n    }\n\n    /**\n     * Resets all properties to `null` to free up references\n     * to resources.\n     */\n    reset(): void\n    {\n        this.textureBuffer\n            = this.uidMap\n                = this.state\n                    = null;\n    }\n}\n","import { AttributeRedirect } from './redirects/AttributeRedirect';\nimport * as PIXI from 'pixi.js';\nimport Redirect from './redirects/Redirect';\n\nconst CompilerConstants = {\n    INDICES_OFFSET: '__offset_indices_',\n    FUNC_SOURCE_BUFFER: 'getSourceBuffer',\n\n    packerArguments: [\n        'targetObject',\n        'compositeAttributes',\n        'compositeIndices',\n        'aIndex',\n        'iIndex',\n        'textureId',\n        'attributeRedirects',\n    ],\n};\n\n/**\n * Packs the geometry of display-object batches into a\n * composite attribute and index buffer.\n *\n * It works by generating an optimized packer function,\n * which can add objects to the composite geometry. This\n * geometry is interleaved and is in accordance with\n * what {@link PIXI.brend.BatchRenderer.generateCompositeGeometry}\n * would return.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class GeometryPacker\n{\n    _targetCompositeAttributeBuffer: PIXI.ViewableBuffer;\n    _targetCompositeIndexBuffer: Uint16Array;\n    _aIndex: number;\n    _iIndex: number;\n\n    _attributeRedirects: AttributeRedirect[];\n    _indexProperty: string;\n    _vertexCountProperty: string | number;\n    _vertexSize: number;\n    _texturePerObject: number;\n\n    protected _aBuffers: PIXI.ViewableBuffer[];\n    protected _iBuffers: Uint16Array[];\n\n    _packerFunction: Function;\n\n    /**\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string} indexProperty - property where indicies are\n     *     kept; null/undefined if not required.\n     * @param {string | number} vertexCountProperty - property where\n     *      no. of vertices for each object are kept. This could also\n     *      be a constant.\n     * @param {number} vertexSize - vertex size, calculated by\n     *     default. This should exclude the vertex attribute\n     * @param {number} texturePerObject - no. of textures per object\n     */\n    constructor(attributeRedirects: AttributeRedirect[], indexProperty: string, vertexCountProperty: string | number,\n        vertexSize = AttributeRedirect.vertexSizeFor(attributeRedirects),\n        texturePerObject)\n    {\n        vertexSize += texturePerObject * 4;// texture indices are also passed\n\n        this._targetCompositeAttributeBuffer = null;\n        this._targetCompositeIndexBuffer = null;\n        this._aIndex = 0;\n        this._iIndex = 0;\n\n        this._attributeRedirects = attributeRedirects;\n        this._indexProperty = indexProperty;\n        this._vertexCountProperty = vertexCountProperty;\n        this._vertexSize = vertexSize;\n        this._texturePerObject = texturePerObject;\n\n        this._aBuffers = [];// @see _getAttributeBuffer\n        this._iBuffers = [];// @see _getIndexBuffer\n    }\n\n    /**\n     * A generated function that will append an object's\n     * attributes and indices to composite buffers.\n     *\n     * The composite attribute buffer is interleaved.\n     *\n     * The composite index buffer has adjusted indices. It\n     * accounts for the new positions of vertices in the\n     * composite attribute buffer.\n     *\n     * You can overwrite this property with a custom packer\n     * function.\n     *\n     * @member {PIXI.brend.PackerFunction}\n     */\n    get packerFunction(): Function\n    {\n        if (!this._packerFunction)\n        {\n            this._packerFunction\n                = new FunctionCompiler(this).compile();// eslint-disable-line\n        }\n\n        return this._packerFunction;\n    }\n\n    set packerFunction(func: Function)// eslint-disable-line require-jsdoc\n    {\n        this._packerFunction = func;\n    }\n\n    /**\n     * This is the currently active composite attribute\n     * buffer. It may contain garbage in unused locations.\n     *\n     * @member {PIXI.ViewableBuffer}\n     */\n    get compositeAttributes(): PIXI.ViewableBuffer\n    {\n        return this._targetCompositeAttributeBuffer;\n    }\n\n    /**\n     * This is the currently active composite index\n     * buffer. It may contain garbage in unused locations.\n     *\n     * It will be `null` if `indexProperty` was not given.\n     *\n     * @member {Uint16Array}\n     */\n    get compositeIndices(): Uint16Array\n    {\n        return this._targetCompositeIndexBuffer;\n    }\n\n    /**\n     * @param {number} batchVertexCount\n     * @param {number} batchIndexCount\n     */\n    reset(batchVertexCount: number, batchIndexCount: number): void\n    {\n        this._targetCompositeAttributeBuffer\n            = this.getAttributeBuffer(batchVertexCount);\n\n        if (this._indexProperty)\n        {\n            this._targetCompositeIndexBuffer\n                = this.getIndexBuffer(batchIndexCount);\n        }\n\n        this._aIndex = this._iIndex = 0;\n    }\n\n    /**\n     * @param {PIXI.DisplayObject} targetObject\n     * @param {number} textureId\n     */\n    pack(targetObject: PIXI.DisplayObject, textureId: number): void\n    {\n        this.packerFunction(\n            targetObject,\n            this._targetCompositeAttributeBuffer,\n            this._targetCompositeIndexBuffer,\n            this._aIndex,\n            this._iIndex,\n            textureId,\n            this._attributeRedirects,\n        );\n    }\n\n    protected getAttributeBuffer(size: number): PIXI.ViewableBuffer\n    {\n        // 8 vertices is enough for 2 quads\n        const roundedP2 = PIXI.utils.nextPow2(Math.ceil(size / 8));\n        const roundedSizeIndex = PIXI.utils.log2(roundedP2);\n        const roundedSize = roundedP2 * 8;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._aBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer\n                = new PIXI.ViewableBuffer(roundedSize * this._vertexSize);\n        }\n\n        return buffer;\n    }\n\n    protected getIndexBuffer(size: number): Uint16Array\n    {\n        // 12 indices is enough for 2 quads\n        const roundedP2 = PIXI.utils.nextPow2(Math.ceil(size / 12));\n        const roundedSizeIndex = PIXI.utils.log2(roundedP2);\n        const roundedSize = roundedP2 * 12;\n\n        if (this._iBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._iBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._iBuffers[roundedSizeIndex] = buffer\n                = new Uint16Array(roundedSize);\n        }\n\n        return buffer;\n    }\n}\n\n// FunctionCompiler was intented to be a static inner\n// class in GeometryPacker. However, due to a bug in\n// JSDoc (3.6.3), I've put it down here :)\n//\n// https://github.com/jsdoc/jsdoc/issues/1673\n\nconst FunctionCompiler = class\n{\n    packer: GeometryPacker;\n\n    /**\n     * @param {PIXI.brend.GeometryPacker} packer\n     */\n    constructor(packer)\n    {\n        this.packer = packer;\n    }\n\n    compile(): Function\n    {\n        const packer = this.packer;\n\n        let packerBody = ``;\n\n        /* Source offset variables for attribute buffers &\n            the corresponding buffer-view references. */\n        packer._attributeRedirects.forEach((redirect, i) =>\n        {\n            packerBody += `\n                let __offset_${i} = 0;\n                const __buffer_${i} = (\n                    ${this._compileSourceBufferExpression(redirect, i)});\n            `;\n        });\n\n        /* Basis for the \"packing\" for-loop. */\n        packerBody += `\n            const {\n                int8View,\n                uint8View,\n                int16View,\n                uint16View,\n                int32View,\n                uint32View,\n                float32View,\n            } = compositeAttributes;\n\n            const vertexCount = ${this._compileVertexCountExpression()};\n\n            let adjustedAIndex = 0;\n\n            for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex++)\n            {\n        `;\n\n        // Eliminate offset conversion when adjacent attributes\n        // have similar source-types.\n        let skipReverseTransformation = false;\n\n        /* Packing for-loop body. */\n        for (let i = 0; i < packer._attributeRedirects.length; i++)\n        {\n            const redirect = packer._attributeRedirects[i];\n\n            /* Initialize adjsutedAIndex in terms of source type. */\n            if (!skipReverseTransformation)\n            {\n                packerBody += `\n                    adjustedAIndex = aIndex / ${this._sizeOf(i)};\n                `;\n            }\n\n            if (typeof redirect.size === 'number')\n            {\n                for (let j = 0; j < redirect.size; j++)\n                {\n                    packerBody += `\n                        ${redirect.type}View[adjustedAIndex++] =\n                            __buffer_${i}[__offset_${i}++];\n                    `;\n                }\n            }\n            else\n            {\n                packerBody += `\n                        ${redirect.type}View[adjustedAIndex++] =\n                            __buffer_${i};\n                `;\n            }\n\n            if (packer._attributeRedirects[i + 1]\n                && (this._sizeOf(i + 1) !== this._sizeOf(i)))\n            {\n                packerBody += `\n                    aIndex = adjustedAIndex * ${this._sizeOf(i)};\n                `;\n            }\n            else\n            {\n                skipReverseTransformation = true;\n            }\n        }\n\n        if (skipReverseTransformation)\n        {\n            if (this._sizeOf(packer._attributeRedirects.length - 1)\n                    !== 4)\n            {\n                packerBody += `\n                    aIndex = adjustedAIndex * ${this._sizeOf(\n        packer._attributeRedirects.length - 1)}\n                `;\n                skipReverseTransformation = false;\n            }\n        }\n\n        if (packer._texturePerObject > 0)\n        {\n            if (packer._texturePerObject > 1)\n            {\n                if (!skipReverseTransformation)\n                {\n                    packerBody += `\n                        adjustedAIndex = aIndex / 4;\n                    `;\n                }\n\n                for (let k = 0; k < packer._texturePerObject; k++)\n                {\n                    packerBody += `\n                        float32View[adjustedAIndex++] = textureId[${k}];\n                    `;\n                }\n\n                packerBody += `\n                    aIndex = adjustedAIndex * 4;\n                `;\n            }\n            else if (!skipReverseTransformation)\n            {\n                packerBody += `\n                    float32View[aIndex] = textureId;\n                    aIndex += 4;\n                `;\n            }\n            else\n            {\n                packerBody += `\n                    float32View[adjustedAIndex++] = textureId;\n                    aIndex = adjustedAIndex * 4;\n                `;\n            }\n        }\n\n        /* Close the packing for-loop. */\n        packerBody += `}\n            ${this.packer._indexProperty\n        ? `const oldAIndex = this._aIndex;`\n        : ''}\n            this._aIndex = aIndex;\n        `;\n\n        if (this.packer._indexProperty)\n        {\n            packerBody += `\n                const verticesBefore = oldAIndex / ${this.packer._vertexSize}\n                const indexCount\n                    = targetObject['${this.packer._indexProperty}'].length;\n\n                for (let j = 0; j < indexCount; j++)\n                {\n                    compositeIndices[iIndex++] = verticesBefore +\n                        targetObject['${this.packer._indexProperty}'][j];\n                }\n\n                this._iIndex = iIndex;\n            `;\n        }\n\n        // eslint-disable-next-line no-new-func\n        return new Function(\n            ...CompilerConstants.packerArguments,\n            packerBody);\n    }\n\n    _compileSourceBufferExpression(redirect: Redirect, i: number): string\n    {\n        return (typeof redirect.source === 'string')\n            ? `targetObject['${redirect.source}']`\n            : `attributeRedirects[${i}].source(targetObject)`;\n    }\n\n    _compileVertexCountExpression(): string\n    {\n        if (!this.packer._vertexCountProperty)\n        {\n            // auto-calculate based on primary attribute\n            return `__buffer_0.length / ${\n                this.packer._attributeRedirects[0].size}`;\n        }\n\n        return (\n            (typeof this.packer._vertexCountProperty === 'string')\n                ? `targetObject.${this.packer._vertexCountProperty}`\n                : `${this.packer._vertexCountProperty}`\n        );\n    }\n\n    _sizeOf(i: number): number\n    {\n        return PIXI.ViewableBuffer.sizeOf(\n            this.packer._attributeRedirects[i].type);\n    }\n};\n\nexport default GeometryPacker;\n","import * as PIXI from 'pixi.js';\n\nexport function resolveConstantOrProperty(targetObject: PIXI.DisplayObject, property: string | number): any\n{\n    return (typeof property === 'string')\n        ? targetObject[property]\n        : property;\n}\n\nexport default resolveConstantOrProperty;\n","import * as PIXI from 'pixi.js';\n\nexport function resolveFunctionOrProperty(targetObject: PIXI.DisplayObject, property: Function | string): any\n{\n    return (typeof property === 'string')\n        ? targetObject[property]\n        : property(targetObject);\n}\n\nexport default resolveFunctionOrProperty;\n","import { Batch } from './Batch';\nimport { BatchGenerator } from './BatchGenerator';\nimport { GeometryPacker } from './GeometryPacker';\nimport * as PIXI from 'pixi.js';\nimport { resolveConstantOrProperty, resolveFunctionOrProperty } from './resolve';\nimport { AttributeRedirect } from './redirects/AttributeRedirect';\n\n/**\n * Core class that renders objects in batches. Clients should\n * defer rendering to a `BatchRenderer` instance by registering\n * it as a plugin.\n *\n * @memberof PIXI.brend\n * @class\n * @extends PIXI.ObjectRenderer\n */\nexport class BatchRenderer extends PIXI.ObjectRenderer\n{\n    _attributeRedirects: AttributeRedirect[];\n    _indexProperty: string;\n    _vertexCountProperty: string | number;\n    _textureProperty: string;\n    _texturePerObject: number;\n    _textureAttribute: string;\n    _stateFunction: Function;\n    _shaderFunction: Function;\n\n    _BatchGeneratorClass: typeof BatchGenerator;\n    _batchGenerator: BatchGenerator;\n\n    _packer: GeometryPacker;\n    _geom: PIXI.Geometry;\n\n    _objectBuffer: PIXI.DisplayObject[];\n    _bufferedVertices: number;\n    _bufferedIndices: number;\n\n    _shader: PIXI.Shader;\n\n    _batchPool: Array<Batch>;\n    _batchCount: number;\n\n    MAX_TEXTURES: number;\n\n    /**\n     * @param {PIXI.Renderer} renderer - renderer to attach to\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string | null} indexProperty\n     * @param {string | number} vertexCountProperty\n     * @param {string | null} textureProperty\n     * @param {number} texturePerObject\n     * @param {string} textureAttribute - name of texture-id attribute variable\n     * @param {Function} stateFunction - returns a {PIXI.State} for an object\n     * @param {Function} shaderFunction - generates a shader given this instance\n     * @param {PIXI.brend.GeometryPacker} [packer=new PIXI.brend.GeometryPacker]\n     * @param {Class} [BatchGeneratorClass=PIXI.brend.BatchGenerator]\n     * @see PIXI.brend.ShaderGenerator\n     */\n    constructor(// eslint-disable-line max-params\n        renderer: PIXI.Renderer,\n        attributeRedirects: AttributeRedirect[],\n        indexProperty: string,\n        vertexCountProperty: string | number,\n        textureProperty: string,\n        texturePerObject: number,\n        textureAttribute: string,\n        stateFunction: (BatchRenderer) => PIXI.State,\n        shaderFunction: (BatchRenderer) => PIXI.Shader,\n        packer = new GeometryPacker(\n            attributeRedirects,\n            indexProperty,\n            vertexCountProperty, // auto-calculate\n            undefined,\n            texturePerObject,\n        ),\n        BatchGeneratorClass = BatchGenerator,\n    )\n    {\n        super(renderer);\n\n        this._attributeRedirects = attributeRedirects;\n        this._indexProperty = indexProperty;\n        this._vertexCountProperty = vertexCountProperty;\n        this._textureProperty = textureProperty;\n        this._texturePerObject = texturePerObject;\n        this._textureAttribute = textureAttribute;\n        this._stateFunction = stateFunction;\n        this._shaderFunction = shaderFunction;\n\n        this._BatchGeneratorClass = BatchGeneratorClass;\n        this._batchGenerator = null;// @see this#contextChange\n\n        this.renderer.runners.contextChange.add(this);\n\n        if (this.renderer.gl)// we are late to the party!\n        {\n            this.contextChange();\n        }\n\n        this._packer = packer;\n\n        this._geom = BatchRenderer.generateCompositeGeometry(\n            attributeRedirects,\n            !!indexProperty,\n            textureAttribute,\n            texturePerObject);\n\n        this._objectBuffer = [];\n        this._bufferedVertices = 0;\n        this._bufferedIndices = 0;\n        this._shader = null;\n\n        this._batchPool = [];// may contain garbage after _batchCount\n        this._batchCount = 0;\n    }\n\n    contextChange(): void\n    {\n        const gl = this.renderer.gl;\n\n        if (PIXI.settings.PREFER_ENV === PIXI.ENV.WEBGL_LEGACY)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            this.MAX_TEXTURES = Math.min(\n                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n                PIXI.settings.SPRITE_MAX_TEXTURES);\n        }\n\n        this._batchGenerator = new this._BatchGeneratorClass(\n            this._texturePerObject, this.MAX_TEXTURES,\n            this._textureProperty, true); // NOTE: Force texture reduction\n\n        if (!this._batchGenerator.enableTextureReduction)\n        {\n            throw new Error('PIXI.brend.BatchRenderer does not support '\n                    + 'batch generation without texture reduction enabled.');\n        }\n    }\n\n    start(): void\n    {\n        this._objectBuffer.length = 0;\n        this._bufferedVertices = 0;\n        this._bufferedIndices = 0;\n\n        this._shader = this._shaderFunction(this);\n\n        if (this._shader.uniforms.uSamplers)\n        {\n            this._shader.uniforms.uSamplers\n                = BatchRenderer.generateTextureArray(this.MAX_TEXTURES);\n        }\n\n        this.renderer.shader.bind(this._shader, false);\n    }\n\n    render(targetObject: PIXI.DisplayObject): void\n    {\n        this._objectBuffer.push(targetObject);\n\n        this._bufferedVertices += this._vertexCountFor(targetObject);\n\n        if (this._indexProperty)\n        {\n            this._bufferedIndices += resolveConstantOrProperty(\n                targetObject, this._indexProperty).length;\n        }\n    }\n\n    flush(): void\n    {\n        const {\n            _batchGenerator: batchGenerator,\n            _geom: geom,\n            _packer: packer,\n            renderer,\n            _stateFunction: stateFunction,\n            _textureProperty: textureProperty,\n            _texturePerObject: texturePerObject,\n        } = this;\n\n        const gl = renderer.gl;\n        const buffer = this._objectBuffer;\n        const bufferLength = buffer.length;\n\n        this._batchCount = 0;\n        packer.reset(this._bufferedVertices, this._bufferedIndices);\n\n        let batchStart = 0;\n\n        // Generate batches/groups that will be drawn using just\n        // one draw call.\n        for (let objectIndex = 0; objectIndex < bufferLength;)\n        {\n            const target = buffer[objectIndex];\n            const wasPut = batchGenerator.put(target,\n                resolveFunctionOrProperty(target, stateFunction));\n\n            if (!wasPut)\n            {\n                batchGenerator.finalize(this._newBatch(batchStart));\n                batchStart = objectIndex;\n            }\n            else\n            {\n                ++objectIndex;\n            }\n        }\n\n        // Generate the last batch, if required.\n        if (batchGenerator._batchBuffer.length !== 0)\n        {\n            batchGenerator.finalize(this._newBatch(batchStart));\n        }\n\n        // Pack each object into the composite geometry. This is done\n        // after batching, so that texture-ids are generated.\n        let textureId = this._texturePerObject === 1\n            ? 0\n            : new Array(texturePerObject);\n\n        for (let i = 0; i < this._batchCount; i++)// loop-per(batch)\n        {\n            const batch = this._batchPool[i];\n            const batchBuffer = batch.batchBuffer;\n            const batchLength = batchBuffer.length;\n            const uidMap = batch.uidMap;\n\n            let vertexCount = 0;// eslint-disable-line\n            let indexCount = 0;\n\n            for (let j = 0; j < batchLength; j++)// loop-per(targetObject)\n            {\n                const targetObject = batchBuffer[j];\n\n                if (this._indexProperty)\n                {\n                    indexCount += resolveConstantOrProperty(\n                        targetObject, this._indexProperty).length;\n                }\n                else\n                {\n                    vertexCount += resolveConstantOrProperty(\n                        targetObject, this._vertexCountProperty);\n                }\n\n                // externally-defined properties for draw calls\n                batch.$vertexCount = vertexCount;\n                batch.$indexCount = indexCount;\n\n                const tex = targetObject[textureProperty];\n\n                let texUID;\n\n                if (texturePerObject === 1)\n                {\n                    texUID = tex.baseTexture\n                        ? tex.baseTexture.uid\n                        : tex.uid;\n\n                    textureId = uidMap[texUID];\n                }\n                else\n                {\n                    let _tex;\n\n                    for (let k = 0; k < tex.length; k++)\n                    {\n                        _tex = tex[k];\n\n                        texUID = _tex.BaseTexture\n                            ? _tex.baseTexture.uid\n                            : _tex.uid;\n\n                        textureId[k] = uidMap[texUID];\n                    }\n                }\n\n                packer.pack(targetObject, textureId);\n            }\n        }\n\n        // Upload the geometry\n        geom.$buffer.update(packer.compositeAttributes.float32View);\n        geom.getIndex().update(packer.compositeIndices);\n        renderer.geometry.bind(geom);\n        renderer.geometry.updateBuffers();\n\n        // Now draw each batch\n        for (let i = 0; i < this._batchCount; i++)\n        {\n            const batch = this._batchPool[i];\n\n            batch.upload();\n\n            if (this._indexProperty)\n            {\n                gl.drawElements(gl.TRIANGLES,\n                    batch.$indexCount,\n                    gl.UNSIGNED_SHORT,\n                    batch.geometryOffset * 2);// * 2 cause Uint16 indices\n            }\n            else\n            {\n                gl.drawArrays(gl.TRIANGLES,\n                    batch.geometryOffset,\n                    batch.$vertexCount);// TODO: *vertexSize\n            }\n\n            batch.reset();\n        }\n    }\n\n    stop(): void\n    {\n        if (this._bufferedVertices)\n        {\n            this.flush();\n        }\n    }\n\n    protected _newBatch(batchStart: number): Batch\n    {\n        if (this._batchCount === this._batchPool.length)\n        {\n            const batch = new Batch(batchStart);\n\n            this._batchPool.push(batch);\n            ++this._batchCount;\n\n            return batch;\n        }\n\n        const batch = this._batchPool[this._batchCount++];\n\n        batch.reset();\n        batch.geometryOffset = batchStart;\n\n        return batch;\n    }\n\n    protected _vertexCountFor(targetObject: PIXI.DisplayObject): number\n    {\n        return (this._vertexCountProperty)\n            ? resolveConstantOrProperty(targetObject, this._vertexCountProperty)\n            : resolveFunctionOrProperty(targetObject,\n                this._attributeRedirects[0].source).length\n                    / (this._attributeRedirects[0].size as number);\n    }\n\n    /**\n     * Generates a `PIXI.Geometry` that can be used for rendering\n     * multiple display objects at once.\n     *\n     * @param {Array<PIXI.brend.AttributeRedirect>} attributeRedirects\n     * @param {boolean} hasIndex - whether to include an index property\n     * @param {string} textureAttribute - name of the texture-id attribute\n     * @param {number} texturePerObject - no. of textures per object\n     */\n    static generateCompositeGeometry(attributeRedirects, hasIndex,\n        textureAttribute, texturePerObject): PIXI.Geometry\n    {\n        const geom = new PIXI.Geometry();\n        const attributeBuffer = new PIXI.Buffer(null, false, false);\n        const indexBuffer = hasIndex ? new PIXI.Buffer(null, false, true) : null;\n\n        attributeRedirects.forEach((redirect) =>\n        {\n            const {\n                glslIdentifer, glType, glSize,\n                normalize,\n            } = redirect;\n\n            geom.addAttribute(glslIdentifer, attributeBuffer,\n                glSize, normalize, glType);\n        });\n\n        if (textureAttribute && texturePerObject > 0)\n        {\n            geom.addAttribute(textureAttribute, attributeBuffer,\n                texturePerObject, true, PIXI.TYPES.FLOAT);\n        }\n\n        if (hasIndex)\n        {\n            geom.addIndex(indexBuffer);\n        }\n\n        geom.$buffer = attributeBuffer;\n\n        // $buffer is attributeBuffer\n        // getIndex() is ?indexBuffer\n        return geom;\n    }\n\n    static generateTextureArray(count: number): Int32Array\n    {\n        const array = new Int32Array(count);\n\n        for (let i = 0; i < count; i++)\n        {\n            array[i] = i;\n        }\n\n        return array;\n    }\n}\n\nexport default BatchRenderer;\n","import { BatchRenderer } from './BatchRenderer';\nimport { AttributeRedirect } from './redirects/AttributeRedirect';\nimport GeometryPacker from './GeometryPacker';\nimport BatchGenerator from './BatchGenerator';\n\n/**\n * Generates a batch-renderer plugin.\n *\n * @memberof PIXI.brend\n * @hideconstructor\n * @class\n */\nexport class BatchRendererPluginFactory\n{\n    /**\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string | Array<number>} indexProperty\n     * @param {string | number} vertexCountProperty\n     * @param {string} textureProperty\n     * @param {number} texturePerObject\n     * @param {string} textureAttribute\n     * @param {Function} stateFunction\n     * @param {Function} shaderFunction\n     * @param {PIXI.brend.GeometryPacker} [packer]\n     * @param {Class} [BatchGeneratorClass]\n     * @param {Class} [BatchRendererClass]\n     */\n    static from(/* eslint-disable-line max-params */\n        attributeRedirects: AttributeRedirect[],\n        indexProperty: string,\n        vertexCountProperty: string | number,\n        textureProperty: string,\n        texturePerObject: number,\n        textureAttribute: string,\n        stateFunction: (brend: BatchRenderer) => any,\n        shaderFunction: (brend: BatchRenderer) => any,\n        packer: GeometryPacker,\n        BatchGeneratorClass: typeof BatchGenerator,\n        BatchRendererClass = BatchRenderer,\n    ): typeof BatchRenderer\n    {\n        return class extends BatchRendererClass\n        {\n            constructor(renderer)\n            {\n                super(renderer,\n                    attributeRedirects,\n                    indexProperty,\n                    vertexCountProperty,\n                    textureProperty,\n                    texturePerObject,\n                    textureAttribute,\n                    stateFunction,\n                    shaderFunction,\n                    packer,\n                    BatchGeneratorClass);\n            }\n        };\n    }\n}\n\nexport default BatchRendererPluginFactory;\n","import * as PIXI from 'pixi.js';\nimport BatchRenderer from './BatchRenderer';\n\n// JavaScript is stupid enough not to have a replaceAll\n// in String. This is a temporary solution and we should\n// depend on an actually polyfill.\nfunction _replaceAll(target: string, search: string, replacement: string): string\n{\n    return target.replace(new RegExp(search, 'g'), replacement);\n}\n\nfunction injectTexturesPerBatch(batchRenderer: BatchRenderer): string\n{\n    return `${batchRenderer.MAX_TEXTURES}`;\n}\n\n/**\n * Exposes an easy-to-use API for generating a shader function\n * for batch rendering.\n *\n * You are required to provide an injector map, which maps\n * macros to functions that return a string value for those\n * macros given a renderer.\n *\n * By default, only one injector is used - the textures per\n * batch `%texturesPerBatch%` macro. This is replaced by\n * the number of textures passed to the `uSamplers` textures\n * uniform.\n *\n * @memberof PIXI.brend\n * @class\n */\nclass ShaderGenerator\n{\n    protected _vertexShaderTemplate: string;\n    protected _fragmentShaderTemplate: string;\n    protected _uniforms: any;\n    protected _templateInjectors: any;\n\n    protected disableVertexShaderTemplate: boolean;\n\n    protected _cache: any;\n    protected _cState: any;\n\n    /**\n     * WARNING: Do not pass `uSamplers` in your uniforms. They\n     *  will be added to your shader instance directly.\n     *\n     * @param {string} vertexShaderTemplate\n     * @param {string} fragmentShaderTemplate\n     * @param {UniformGroup | Map<string, object>} uniforms\n     * @param {Object.<String, PIXI.brend.InjectorFunction>} [templateInjectors]\n     * @param {boolean} [disableVertexShaderTemplate=true] - turn off (true)\n     *      if you aren't using macros in the vertex shader\n     */\n    constructor(\n        vertexShaderTemplate: string,\n        fragmentShaderTemplate: string,\n        uniforms = {},\n        templateInjectors = {\n            '%texturesPerBatch%': injectTexturesPerBatch,\n        },\n        disableVertexShaderTemplate = true,\n    )\n    {\n        if (!templateInjectors['%texturesPerBatch%'])\n        {\n            templateInjectors['%texturesPerBatch%'] = injectTexturesPerBatch;\n        }\n\n        /** @protected */\n        this._vertexShaderTemplate = vertexShaderTemplate;\n        /** @protected */\n        this._fragmentShaderTemplate = fragmentShaderTemplate;\n        /** @protected */\n        this._uniforms = uniforms;\n        /** @protected */\n        this._templateInjectors = templateInjectors;\n\n        /**\n         * Disable vertex shader templates to speed up shader\n         * generation.\n         *\n         * @member {Boolean}\n         */\n        this.disableVertexShaderTemplate = disableVertexShaderTemplate;\n\n        /**\n         * Maps the stringifed state of the batch renderer to the\n         * generated shader.\n         *\n         * @private\n         * @member {Object.<String, PIXI.Shader>}\n         */\n        this._cache = {};\n\n        /**\n         * Unstringifed current state of the batch renderer.\n         *\n         * @private\n         * @member {Object.<String, String>}\n         * @see {PIXI.brend.ShaderGenerator#_generateInjectorBasedState}\n         */\n        this._cState = null;\n    }\n\n    /**\n     * @return shader function that can be given to the batch renderer\n     */\n    generateFunction(): (brend: BatchRenderer) => PIXI.Shader\n    {\n        return (batchRenderer: BatchRenderer): PIXI.Shader =>\n        {\n            const stringState = this._generateInjectorBasedState(batchRenderer);\n            const cachedShader = this._cache[stringState];\n\n            if (cachedShader)\n            {\n                return cachedShader;\n            }\n\n            return this._generateShader(stringState);\n        };\n    }\n\n    protected _generateInjectorBasedState(batchRenderer: BatchRenderer): string\n    {\n        let state = '';\n        const cState = this._cState = {};\n\n        for (const injectorMacro in this._templateInjectors)\n        {\n            const val = this._templateInjectors[injectorMacro](batchRenderer);\n\n            state += val;\n            cState[injectorMacro] = val;\n        }\n\n        return state;\n    }\n\n    protected _generateShader(stringState: string): PIXI.Shader\n    {\n        let vertexShaderTemplate = this._vertexShaderTemplate.slice(0);\n\n        let fragmentShaderTemplate = this._fragmentShaderTemplate.slice(0);\n\n        for (const injectorTemplate in this._cState)\n        {\n            if (!this.disableVertexShaderTemplate)\n            {\n                vertexShaderTemplate = _replaceAll(vertexShaderTemplate,\n                    injectorTemplate, this._cState[injectorTemplate]);\n            }\n\n            fragmentShaderTemplate = _replaceAll(fragmentShaderTemplate,\n                injectorTemplate, this._cState[injectorTemplate]);\n        }\n\n        const shader = PIXI.Shader.from(vertexShaderTemplate,\n            fragmentShaderTemplate, this._uniforms);\n\n        this._cache[stringState] = shader;\n\n        return shader;\n    }\n}\n\nexport { ShaderGenerator };\nexport default ShaderGenerator;\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","source","glslIdentifer","type","size","glType","glSize","normalize","PIXI.TYPES","FLOAT","_super","_this","properSize","AttributeRedirect","attributeRedirects","reduce","acc","redirect","PIXI.ViewableBuffer","sizeOf","Redirect","textureIncrement","textureLimit","textureProperty","enableTextureReduction","_state","_textureIncrement","_textureLimit","_textureProperty","_batchBuffer","_textureBuffer","_textureBufferLength","_textureIndexedBuffer","_textureIndexMap","_putTexture","_putOnlyTexture","_putTextureArray","_putTextureWithoutReduction","_putTextureArrayWithoutReduction","BatchGenerator","targetObject","state","data","onPut","push","batch","batchBuffer","textureBuffer","uidMap","texture","baseTexture","uid","index","textureArray","deltaBufferLength","i","length","geometryOffset","Batch","renderer","forEach","tex","bind","set","CompilerConstants","indexProperty","vertexCountProperty","vertexSize","texturePerObject","vertexSizeFor","_targetCompositeAttributeBuffer","_targetCompositeIndexBuffer","_aIndex","_iIndex","_attributeRedirects","_indexProperty","_vertexCountProperty","_vertexSize","_texturePerObject","_aBuffers","_iBuffers","GeometryPacker","_packerFunction","FunctionCompiler","compile","func","batchVertexCount","batchIndexCount","getAttributeBuffer","getIndexBuffer","textureId","packerFunction","roundedP2","PIXI.utils","nextPow2","Math","ceil","roundedSizeIndex","log2","roundedSize","buffer","Uint16Array","packer","class_1","packerBody","_compileSourceBufferExpression","_compileVertexCountExpression","skipReverseTransformation","_sizeOf","j","k","Function","s","il","arguments","r","a","jl","resolveConstantOrProperty","property","resolveFunctionOrProperty","textureAttribute","stateFunction","shaderFunction","BatchGeneratorClass","undefined","_textureAttribute","_stateFunction","_shaderFunction","_BatchGeneratorClass","_batchGenerator","runners","contextChange","add","gl","_packer","_geom","BatchRenderer","generateCompositeGeometry","_objectBuffer","_bufferedVertices","_bufferedIndices","_shader","_batchPool","_batchCount","PIXI.settings","PREFER_ENV","PIXI.ENV","WEBGL_LEGACY","MAX_TEXTURES","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","Error","uniforms","uSamplers","generateTextureArray","shader","_vertexCountFor","_a","batchGenerator","geom","bufferLength","reset","batchStart","objectIndex","target","put","finalize","_newBatch","batchLength","vertexCount","indexCount","$vertexCount","$indexCount","texUID","_tex","BaseTexture","pack","$buffer","update","compositeAttributes","float32View","getIndex","compositeIndices","geometry","updateBuffers","upload","drawElements","TRIANGLES","UNSIGNED_SHORT","drawArrays","flush","batch_1","hasIndex","PIXI.Geometry","attributeBuffer","PIXI.Buffer","indexBuffer","addAttribute","addIndex","count","array","Int32Array","PIXI.ObjectRenderer","BatchRendererPluginFactory","BatchRendererClass","_replaceAll","search","replacement","replace","RegExp","injectTexturesPerBatch","batchRenderer","vertexShaderTemplate","fragmentShaderTemplate","templateInjectors","disableVertexShaderTemplate","%texturesPerBatch%","_vertexShaderTemplate","_fragmentShaderTemplate","_uniforms","_templateInjectors","_cache","_cState","ShaderGenerator","stringState","_generateInjectorBasedState","cachedShader","_generateShader","cState","injectorMacro","val","slice","injectorTemplate","PIXI.Shader","from"],"mappings":"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"}