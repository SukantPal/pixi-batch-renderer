{"version":3,"file":"pixi-batch-renderer.js","sources":["../src/redirects/Redirect.ts","../src/redirects/AttributeRedirect.ts","../src/BatchGenerator.ts","../src/Batch.ts","../src/GeometryPacker.ts","../src/resolve/resolveConstantOrProperty.ts","../src/resolve/resolveFunctionOrProperty.ts","../src/BatchRenderer.ts","../src/BatchRendererPluginFactory.ts","../src/ShaderGenerator.ts","../src/index.ts"],"sourcesContent":["import * as PIXI from 'pixi.js';\n\n/**\n * Redirects are used to aggregate the resources needed by the WebGL pipeline to render\n * a display-object. This includes the base primitives (geometry), uniforms, and\n * textures (which are handled as \"special\" uniforms).\n *\n * @memberof PIXI.brend\n * @class\n * @abstract\n * @see PIXI.brend.AttributeRedirect\n */\nexport abstract class Redirect\n{\n    public source: string | ((displayObject: PIXI.DisplayObject) => any);\n    public glslIdentifer: string;\n\n    constructor(source: string | ((displayObject: PIXI.DisplayObject) => any), glslIdentifer: string)\n    {\n        /**\n         * The property on the display-object that holds the resource.\n         *\n         * Instead of a property, you can provide a callback that generates the resource\n         * on invokation.\n         *\n         * @member {string | Function}\n         */\n        this.source = source;\n\n        /**\n         * The shader variable that references the resource, e.g. attribute or uniform\n         * name.\n         * @member {string}\n         */\n        this.glslIdentifer = glslIdentifer;\n    }\n}\n\nexport default Redirect;\n","import * as PIXI from 'pixi.js';\nimport { Redirect } from './Redirect';\n\n/**\n * This redirect defines an attribute of a display-object's geometry. The attribute\n * data is expected to be stored in a `PIXI.ViewableBuffer`, in an array, or (if\n * just one element) as the property itself.\n *\n * @memberof PIXI.brend\n * @class\n * @extends PIXI.brend.Redirect\n * @example\n * // This attribute redirect calculates the tint used on top of a texture. Since the\n * // tintMode can change anytime, it is better to use a derived source (function).\n * //\n * // Furthermore, the color is uploaded as four bytes (`attribute vec4 aTint`) while the\n * // source returns an integer. This is done by splitting the 32-bit integer into four\n * // 8-bit bytes.\n * new PIXI.brend.AttributeRedirect(\n *     (tgt: ExampleDisplay) => (tgt.alpha < 1.0 && tgt.tintMode === PREMULTIPLY)\n *          ? premultiplyTint(tgt.rgb, tgt.alpha)\n *          : tgt.rgb + (tgt.alpha << 24);\n *     'aTint',\n *     'int32',\n *     '%notarray%',\n *     PIXI.TYPES.UNSIGNED_BYTE,\n *     4,\n *     true\n * );\n */\nexport class AttributeRedirect extends Redirect\n{\n    public type: string;\n    public size: number | '%notarray%';\n    public glType: PIXI.TYPES;\n    public glSize: number;\n    public normalize: boolean;\n\n    public properSize: number;\n\n    /**\n     * @param {string | Function} source - redirect source\n     * @param {string} glslIdentifer - shader attribute variable\n     * @param {string}[type='float32'] - the type of data stored in the source\n     * @param {number | '%notarray%'}[size=0] - size of the source array ('%notarray' if not an array & just one element)\n     * @param {PIXI.TYPES}[glType=PIXI.TYPES.FLOAT] - data format to be uploaded in\n     * @param {number} glSize - number of elements to be uploaded as (size of source and upload must match)\n     * @param {boolean}[normalize=false] - whether to normalize the data before uploading\n     */\n    constructor(\n        source: string | ((db: PIXI.DisplayObject) => any),\n        glslIdentifer: string,\n        type = 'float32',\n        size: number | '%notarray%' = 0,\n        glType = PIXI.TYPES.FLOAT,\n        glSize: number,\n        normalize = false,\n    )\n    {\n        super(source, glslIdentifer);\n\n        /**\n         * The type of data stored in the source buffer. This can be any of: `int8`, `uint8`,\n         * `int16`, `uint16`, `int32`, `uint32`, or (by default) `float32`.\n         *\n         * @member {string}\n         * @see [PIXI.ViewableBuffer#view]{@link https://pixijs.download/dev/docs/PIXI.ViewableBuffer.html}\n         * @default 'float32'\n         */\n        this.type = type;\n\n        /**\n         * Number of elements to extract out of `source` with\n         * the given view type, for one vertex.\n         *\n         * If source isn't an array (only one element), then\n         * you can set this to `'%notarray%'`.\n         *\n         * @member {number | '%notarray%'}\n         */\n        this.size = size;\n\n        /**\n         * This is equal to `size` or 1 if size is `%notarray%`.\n         *\n         * @member {number}\n         */\n        this.properSize = (size === '%notarray%') ? 1 : size;\n\n        /**\n         * Type of attribute, when uploading.\n         *\n         * Normally, you would use the corresponding type for\n         * the view on source. However, to speed up uploads\n         * you can aggregate attribute values in larger data\n         * types. For example, an RGBA vec4 (byte-sized channels)\n         * can be represented as one `Uint32`, while having\n         * a `glType` of `UNSIGNED_BYTE`.\n         *\n         * @member {PIXI.TYPES}\n         */\n        this.glType = glType;\n\n        /**\n         * Size of attribute in terms of `glType`.\n         *\n         * Note that `glSize * glType <= size * type`\n         *\n         * @readonly\n         */\n        this.glSize = glSize;\n\n        /**\n         * Whether to normalize the attribute values.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        this.normalize = normalize;\n    }\n\n    static vertexSizeFor(attributeRedirects: Array<AttributeRedirect>): number\n    {\n        return attributeRedirects.reduce(\n            (acc, redirect) =>\n                (PIXI.ViewableBuffer.sizeOf(redirect.type)\n                    * redirect.properSize)\n                + acc,\n            0);\n    }\n}\n","import { Batch } from './Batch';\n\n/**\n * Used to generate discrete groups/batches of display-objects\n * that can be drawn together. It also keeps a parallel buffer\n * of textures.\n *\n * This class ensures that the WebGL states are equivalent and\n * the texture count doesn't become greater than the no. of\n * texture registers on the GPU. You can extend it and add\n * constraints by overriding `onPut`.\n *\n * WARNING: `BatchRenderer` does not support geometry\n *              packing with texture reduction disabled.\n *\n * @memberof PIXI.brend\n * @class\n */\nclass BatchGenerator\n{\n    public readonly enableTextureReduction: boolean;\n\n    protected _state: PIXI.State;\n    protected _textureIncrement: number;\n    protected _textureLimit: number;\n    protected _textureProperty: number;\n    /** @internal */\n    public _batchBuffer: Array<PIXI.DisplayObject>;\n    protected _textureBuffer: any;\n    protected _textureBufferLength: number;\n    protected _textureIndexedBuffer: Array<PIXI.BaseTexture>;\n    protected _textureIndexMap: any;\n\n    protected _putTexture: any;\n\n    /**\n     * @param {number} textureIncrement - textures per object\n     * @param {number} textureLimit - no. of texture registers in GPU\n     * @param {string} textureProperty - property where texture is kept\n     * @param {boolean} [enableTextureReduction=true] - whether same textures\n     *      aren't counted multiple times. This reduces draw calls and can\n     *      draw huge amounts of objects at the same time. For example,\n     *      if 1000 objects use the same texture, then they can be drawn\n     *      together. Further more if 1000 object use the same 8 textures\n     *      randomly, then they can be drawn together. (provided other\n     *      constraints like state are satisfied.)\n     */\n    constructor(\n        textureIncrement,\n        textureLimit,\n        textureProperty,\n        enableTextureReduction = true,\n    )\n    {\n        /** @private */\n        this._state = null;\n        /** @private */\n        this._textureIncrement = textureIncrement;\n        /** @private */\n        this._textureLimit = textureLimit;\n        /** @private */\n        this._textureProperty = textureProperty;\n        /** @private */\n        this._batchBuffer = [];\n        /** @private */\n        this._textureBuffer = {}; // uid : texture map\n        /** @private */\n        this._textureBufferLength = 0;\n        /** @private */\n        this._textureIndexedBuffer = []; // array of textures\n        /** @private */\n        this._textureIndexMap = {}; // uid : index in above\n        /** @protected */\n        this.enableTextureReduction = enableTextureReduction;\n\n        // this._putTexture is used to handle texture buffering!\n        if (enableTextureReduction)\n        {\n            if (textureIncrement === 1)\n            {\n                /** @private */\n                this._putTexture = this._putOnlyTexture;\n            }\n            else\n            {\n                this._putTexture = this._putTextureArray;\n            }\n        }\n        else if (textureIncrement === 1)\n        {\n            this._putTexture = this._putTextureWithoutReduction;\n        }\n        else\n        {\n            this._putTexture = this._putTextureArrayWithoutReduction;\n        }\n    }\n\n    /**\n     * Overridable method that is called before an object\n     * is put into this batch. It should check compatibility\n     * with other objects, and return true/false accordingly.\n     *\n     * @param targetObject {PIXI.DisplayObject} - object being added\n     * @protected\n     */\n    onPut(targetObject: PIXI.DisplayObject): boolean // eslint-disable-line @typescript-eslint/no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Put an object into this batch.\n     *\n     * @param targetObject {PIXI.DisplayObject} - object to add\n     * @param state {PIXI.State} - state required by that object\n     * @return {boolean} whether the object was added to the\n     *     batch. If it wasn't, you should finalize it.\n     */\n    put(targetObject: PIXI.DisplayObject, state: PIXI.State): boolean\n    {\n        if (!this._state)\n        {\n            this._state = state;\n        }\n        else if (this._state.data !== state.data)\n        {\n            return false;\n        }\n\n        if (!this.onPut(targetObject))\n        {\n            return false;\n        }\n\n        if (this._textureIncrement > 0\n            && !this._putTexture(targetObject[this._textureProperty]))\n        {\n            return false;\n        }\n\n        this._batchBuffer.push(targetObject);\n\n        return true;\n    }\n\n    /**\n     * Finalize this batch by getting its data into a\n     * `Batch` object.\n     *\n     * @param batch {PIXI.brend.Batch}\n     */\n    finalize(batch: Batch): void\n    {\n        batch.batchBuffer = this._batchBuffer;\n        batch.textureBuffer = this._textureIndexedBuffer;\n        batch.uidMap = this.enableTextureReduction\n            ? this._textureIndexMap : null;\n        batch.state = this._state;\n\n        this._state = null;\n        this._batchBuffer = [];\n        this._textureBuffer = {};\n        this._textureIndexMap = {};\n        this._textureBufferLength = 0;\n        this._textureIndexedBuffer = [];\n    }\n\n    _putOnlyTexture(texture: PIXI.Texture): boolean\n    {\n        if (texture.baseTexture)\n        {\n            texture = texture.baseTexture;\n        }\n\n        const baseTexture: PIXI.BaseTexture = texture as PIXI.BaseTexture;\n\n        if (this._textureBuffer[baseTexture.uid])\n        {\n            return true;\n        }\n        else if (this._textureBufferLength + 1 <= this._textureLimit)\n        {\n            this._textureBuffer[baseTexture.uid] = texture;\n            this._textureBufferLength += 1;\n\n            const newLength = this._textureIndexedBuffer.push(baseTexture);\n            const index = newLength - 1;\n\n            this._textureIndexMap[baseTexture.uid] = index;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    _putTextureArray(textureArray: Array<PIXI.Texture>): boolean\n    {\n        let deltaBufferLength = 0;\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            const texture = textureArray[i].baseTexture\n                ? textureArray[i].baseTexture\n                : textureArray[i];\n\n            if (!this._textureBuffer[texture.uid])\n            {\n                ++deltaBufferLength;\n            }\n        }\n\n        if (deltaBufferLength + this._textureBufferLength > this._textureLimit)\n        {\n            return false;\n        }\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            const texture = textureArray[i].baseTexture\n                ? textureArray[i].baseTexture\n                : textureArray[i];\n\n            if (!this._textureBuffer[texture.uid])\n            {\n                this._textureBuffer[texture.uid] = texture;\n                this._textureBufferLength += 1;\n\n                const newLength = this._textureIndexedBuffer.push(texture);\n                const index = newLength - 1;\n\n                this._textureIndexMap[texture.uid] = index;\n            }\n        }\n\n        return true;\n    }\n\n    _putTextureWithoutReduction(texture: PIXI.BaseTexture): boolean\n    {\n        if (texture.baseTexture)\n        {\n            texture = texture.baseTexture;\n        }\n\n        if (this._textureBufferLength + 1 > this._textureLimit)\n        {\n            return false;\n        }\n\n        this._textureIndexedBuffer.push(texture);\n\n        return true;\n    }\n\n    _putTextureArrayWithoutReduction(textureArray: Array<PIXI.Texture>): boolean\n    {\n        if (this._textureBufferLength + textureArray.length\n            > this._textureLimit)\n        {\n            return false;\n        }\n\n        for (let i = 0; i < textureArray.length; i++)\n        {\n            this._textureIndexedBuffer.push(\n                textureArray[i].baseTexture\n                    ? textureArray[i].baseTexture\n                    : textureArray[i],\n            );\n        }\n\n        return true;\n    }\n}\n\nexport { BatchGenerator };\n\nexport default BatchGenerator;\n","import * as PIXI from 'pixi.js';\n\n/**\n * Resources that need to be uploaded to WebGL to render\n * one batch.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class Batch\n{\n    geometryOffset: number;\n    uidMap: Map<number, number>;\n    state: PIXI.State;\n\n    batchBuffer: Array<PIXI.DisplayObject>;\n    textureBuffer: Array<PIXI.BaseTexture>;\n\n    constructor(geometryOffset: number)\n    {\n        /**\n         * Offset in the geometry (set by `BatchRenderer`)\n         * where this batch is located.\n         *\n         * @member {number}\n         */\n        this.geometryOffset = geometryOffset;\n\n        /**\n         * Buffer of textures that should be uploaded in-order\n         * to GPU texture registers.\n         *\n         * @member {Array<PIXI.Texture>}\n         */\n        this.textureBuffer = null;\n\n        /**\n         * Map of texture-ids into texture-buffer indices.\n         *\n         * @member {Map<number, number>}\n         */\n        this.uidMap = null;\n\n        /**\n         * State required to render this batch.\n         *\n         * @member {PIXI.State}\n         */\n        this.state = null;\n    }\n\n    /**\n     * Uploads the resources required before rendering this\n     * batch.\n     */\n    upload(renderer: PIXI.Renderer): void\n    {\n        this.textureBuffer.forEach((tex, i) =>\n        {\n            renderer.texture.bind(tex, i);\n        });\n\n        renderer.state.set(this.state);\n    }\n\n    /**\n     * Resets all properties to `null` to free up references\n     * to resources.\n     */\n    reset(): void\n    {\n        this.textureBuffer\n            = this.uidMap\n                = this.state\n                    = null;\n    }\n}\n","import { AttributeRedirect } from './redirects/AttributeRedirect';\nimport * as PIXI from 'pixi.js';\nimport Redirect from './redirects/Redirect';\n\nconst CompilerConstants = {\n    INDICES_OFFSET: '__offset_indices_',\n    FUNC_SOURCE_BUFFER: 'getSourceBuffer',\n\n    packerArguments: [\n        'targetObject',\n        'compositeAttributes',\n        'compositeIndices',\n        'aIndex',\n        'iIndex',\n        'textureId',\n        'attributeRedirects',\n    ],\n};\n\n/**\n * Packs the geometry of display-object batches into a\n * composite attribute and index buffer.\n *\n * It works by generating an optimized packer function,\n * which can add objects to the composite geometry. This\n * geometry is interleaved and is in accordance with\n * what {@link PIXI.brend.BatchRenderer.generateCompositeGeometry}\n * would return.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class GeometryPacker\n{\n    _targetCompositeAttributeBuffer: PIXI.ViewableBuffer;\n    _targetCompositeIndexBuffer: Uint16Array;\n    _aIndex: number;\n    _iIndex: number;\n\n    _attributeRedirects: AttributeRedirect[];\n    _indexProperty: string;\n    _vertexCountProperty: string | number;\n    _vertexSize: number;\n    _texturePerObject: number;\n\n    protected _aBuffers: PIXI.ViewableBuffer[];\n    protected _iBuffers: Uint16Array[];\n\n    _packerFunction: Function;\n\n    /**\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string} indexProperty - property where indicies are\n     *     kept; null/undefined if not required.\n     * @param {string | number} vertexCountProperty - property where\n     *      no. of vertices for each object are kept. This could also\n     *      be a constant.\n     * @param {number} vertexSize - vertex size, calculated by\n     *     default. This should exclude the vertex attribute\n     * @param {number} texturePerObject - no. of textures per object\n     */\n    constructor(attributeRedirects: AttributeRedirect[], indexProperty: string, vertexCountProperty: string | number,\n        vertexSize = AttributeRedirect.vertexSizeFor(attributeRedirects),\n        texturePerObject)\n    {\n        vertexSize += texturePerObject * 4;// texture indices are also passed\n\n        this._targetCompositeAttributeBuffer = null;\n        this._targetCompositeIndexBuffer = null;\n        this._aIndex = 0;\n        this._iIndex = 0;\n\n        this._attributeRedirects = attributeRedirects;\n        this._indexProperty = indexProperty;\n        this._vertexCountProperty = vertexCountProperty;\n        this._vertexSize = vertexSize;\n        this._texturePerObject = texturePerObject;\n\n        this._aBuffers = [];// @see _getAttributeBuffer\n        this._iBuffers = [];// @see _getIndexBuffer\n    }\n\n    /**\n     * A generated function that will append an object's\n     * attributes and indices to composite buffers.\n     *\n     * The composite attribute buffer is interleaved.\n     *\n     * The composite index buffer has adjusted indices. It\n     * accounts for the new positions of vertices in the\n     * composite attribute buffer.\n     *\n     * You can overwrite this property with a custom packer\n     * function.\n     *\n     * @member {PIXI.brend.PackerFunction}\n     */\n    get packerFunction(): Function\n    {\n        if (!this._packerFunction)\n        {\n            this._packerFunction\n                = new FunctionCompiler(this).compile();// eslint-disable-line\n        }\n\n        return this._packerFunction;\n    }\n\n    set packerFunction(func: Function)// eslint-disable-line require-jsdoc\n    {\n        this._packerFunction = func;\n    }\n\n    /**\n     * This is the currently active composite attribute\n     * buffer. It may contain garbage in unused locations.\n     *\n     * @member {PIXI.ViewableBuffer}\n     */\n    get compositeAttributes(): PIXI.ViewableBuffer\n    {\n        return this._targetCompositeAttributeBuffer;\n    }\n\n    /**\n     * This is the currently active composite index\n     * buffer. It may contain garbage in unused locations.\n     *\n     * It will be `null` if `indexProperty` was not given.\n     *\n     * @member {Uint16Array}\n     */\n    get compositeIndices(): Uint16Array\n    {\n        return this._targetCompositeIndexBuffer;\n    }\n\n    /**\n     * @param {number} batchVertexCount\n     * @param {number} batchIndexCount\n     */\n    reset(batchVertexCount: number, batchIndexCount: number): void\n    {\n        this._targetCompositeAttributeBuffer\n            = this.getAttributeBuffer(batchVertexCount);\n\n        if (this._indexProperty)\n        {\n            this._targetCompositeIndexBuffer\n                = this.getIndexBuffer(batchIndexCount);\n        }\n\n        this._aIndex = this._iIndex = 0;\n    }\n\n    /**\n     * @param {PIXI.DisplayObject} targetObject\n     * @param {number} textureId\n     */\n    pack(targetObject: PIXI.DisplayObject, textureId: number): void\n    {\n        this.packerFunction(\n            targetObject,\n            this._targetCompositeAttributeBuffer,\n            this._targetCompositeIndexBuffer,\n            this._aIndex,\n            this._iIndex,\n            textureId,\n            this._attributeRedirects,\n        );\n    }\n\n    protected getAttributeBuffer(size: number): PIXI.ViewableBuffer\n    {\n        // 8 vertices is enough for 2 quads\n        const roundedP2 = PIXI.utils.nextPow2(Math.ceil(size / 8));\n        const roundedSizeIndex = PIXI.utils.log2(roundedP2);\n        const roundedSize = roundedP2 * 8;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._aBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer\n                = new PIXI.ViewableBuffer(roundedSize * this._vertexSize);\n        }\n\n        return buffer;\n    }\n\n    protected getIndexBuffer(size: number): Uint16Array\n    {\n        // 12 indices is enough for 2 quads\n        const roundedP2 = PIXI.utils.nextPow2(Math.ceil(size / 12));\n        const roundedSizeIndex = PIXI.utils.log2(roundedP2);\n        const roundedSize = roundedP2 * 12;\n\n        if (this._iBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._iBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._iBuffers[roundedSizeIndex] = buffer\n                = new Uint16Array(roundedSize);\n        }\n\n        return buffer;\n    }\n}\n\n// FunctionCompiler was intented to be a static inner\n// class in GeometryPacker. However, due to a bug in\n// JSDoc (3.6.3), I've put it down here :)\n//\n// https://github.com/jsdoc/jsdoc/issues/1673\n\nconst FunctionCompiler = class\n{\n    packer: GeometryPacker;\n\n    /**\n     * @param {PIXI.brend.GeometryPacker} packer\n     */\n    constructor(packer)\n    {\n        this.packer = packer;\n    }\n\n    compile(): Function\n    {\n        const packer = this.packer;\n\n        let packerBody = ``;\n\n        /* Source offset variables for attribute buffers &\n            the corresponding buffer-view references. */\n        packer._attributeRedirects.forEach((redirect, i) =>\n        {\n            packerBody += `\n                let __offset_${i} = 0;\n                const __buffer_${i} = (\n                    ${this._compileSourceBufferExpression(redirect, i)});\n            `;\n        });\n\n        /* Basis for the \"packing\" for-loop. */\n        packerBody += `\n            const {\n                int8View,\n                uint8View,\n                int16View,\n                uint16View,\n                int32View,\n                uint32View,\n                float32View,\n            } = compositeAttributes;\n\n            const vertexCount = ${this._compileVertexCountExpression()};\n\n            let adjustedAIndex = 0;\n\n            for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex++)\n            {\n        `;\n\n        // Eliminate offset conversion when adjacent attributes\n        // have similar source-types.\n        let skipReverseTransformation = false;\n\n        /* Packing for-loop body. */\n        for (let i = 0; i < packer._attributeRedirects.length; i++)\n        {\n            const redirect = packer._attributeRedirects[i];\n\n            /* Initialize adjsutedAIndex in terms of source type. */\n            if (!skipReverseTransformation)\n            {\n                packerBody += `\n                    adjustedAIndex = aIndex / ${this._sizeOf(i)};\n                `;\n            }\n\n            if (typeof redirect.size === 'number')\n            {\n                for (let j = 0; j < redirect.size; j++)\n                {\n                    packerBody += `\n                        ${redirect.type}View[adjustedAIndex++] =\n                            __buffer_${i}[__offset_${i}++];\n                    `;\n                }\n            }\n            else\n            {\n                packerBody += `\n                        ${redirect.type}View[adjustedAIndex++] =\n                            __buffer_${i};\n                `;\n            }\n\n            if (packer._attributeRedirects[i + 1]\n                && (this._sizeOf(i + 1) !== this._sizeOf(i)))\n            {\n                packerBody += `\n                    aIndex = adjustedAIndex * ${this._sizeOf(i)};\n                `;\n            }\n            else\n            {\n                skipReverseTransformation = true;\n            }\n        }\n\n        if (skipReverseTransformation)\n        {\n            if (this._sizeOf(packer._attributeRedirects.length - 1)\n                    !== 4)\n            {\n                packerBody += `\n                    aIndex = adjustedAIndex * ${this._sizeOf(\n        packer._attributeRedirects.length - 1)}\n                `;\n                skipReverseTransformation = false;\n            }\n        }\n\n        if (packer._texturePerObject > 0)\n        {\n            if (packer._texturePerObject > 1)\n            {\n                if (!skipReverseTransformation)\n                {\n                    packerBody += `\n                        adjustedAIndex = aIndex / 4;\n                    `;\n                }\n\n                for (let k = 0; k < packer._texturePerObject; k++)\n                {\n                    packerBody += `\n                        float32View[adjustedAIndex++] = textureId[${k}];\n                    `;\n                }\n\n                packerBody += `\n                    aIndex = adjustedAIndex * 4;\n                `;\n            }\n            else if (!skipReverseTransformation)\n            {\n                packerBody += `\n                    float32View[aIndex] = textureId;\n                    aIndex += 4;\n                `;\n            }\n            else\n            {\n                packerBody += `\n                    float32View[adjustedAIndex++] = textureId;\n                    aIndex = adjustedAIndex * 4;\n                `;\n            }\n        }\n\n        /* Close the packing for-loop. */\n        packerBody += `}\n            ${this.packer._indexProperty\n        ? `const oldAIndex = this._aIndex;`\n        : ''}\n            this._aIndex = aIndex;\n        `;\n\n        if (this.packer._indexProperty)\n        {\n            packerBody += `\n                const verticesBefore = oldAIndex / ${this.packer._vertexSize}\n                const indexCount\n                    = targetObject['${this.packer._indexProperty}'].length;\n\n                for (let j = 0; j < indexCount; j++)\n                {\n                    compositeIndices[iIndex++] = verticesBefore +\n                        targetObject['${this.packer._indexProperty}'][j];\n                }\n\n                this._iIndex = iIndex;\n            `;\n        }\n\n        // eslint-disable-next-line no-new-func\n        return new Function(\n            ...CompilerConstants.packerArguments,\n            packerBody);\n    }\n\n    _compileSourceBufferExpression(redirect: Redirect, i: number): string\n    {\n        return (typeof redirect.source === 'string')\n            ? `targetObject['${redirect.source}']`\n            : `attributeRedirects[${i}].source(targetObject)`;\n    }\n\n    _compileVertexCountExpression(): string\n    {\n        if (!this.packer._vertexCountProperty)\n        {\n            // auto-calculate based on primary attribute\n            return `__buffer_0.length / ${\n                this.packer._attributeRedirects[0].size}`;\n        }\n\n        return (\n            (typeof this.packer._vertexCountProperty === 'string')\n                ? `targetObject.${this.packer._vertexCountProperty}`\n                : `${this.packer._vertexCountProperty}`\n        );\n    }\n\n    _sizeOf(i: number): number\n    {\n        return PIXI.ViewableBuffer.sizeOf(\n            this.packer._attributeRedirects[i].type);\n    }\n};\n\nexport default GeometryPacker;\n","import * as PIXI from 'pixi.js';\n\nexport function resolveConstantOrProperty(targetObject: PIXI.DisplayObject, property: string | number): any\n{\n    return (typeof property === 'string')\n        ? targetObject[property]\n        : property;\n}\n\nexport default resolveConstantOrProperty;\n","import * as PIXI from 'pixi.js';\n\nexport function resolveFunctionOrProperty(targetObject: PIXI.DisplayObject, property: Function | string): any\n{\n    return (typeof property === 'string')\n        ? targetObject[property]\n        : property(targetObject);\n}\n\nexport default resolveFunctionOrProperty;\n","import { Batch } from './Batch';\nimport { BatchGenerator } from './BatchGenerator';\nimport { GeometryPacker } from './GeometryPacker';\nimport * as PIXI from 'pixi.js';\nimport { resolveConstantOrProperty, resolveFunctionOrProperty } from './resolve';\nimport { AttributeRedirect } from './redirects/AttributeRedirect';\n\n/**\n * This object renderer renders multiple display-objects in batches. It can greatly\n * reduce the number of draw calls issued per frame.\n *\n * ## Batch Rendering Pipeline\n *\n * The batch rendering pipeline consists of the following stages:\n *\n * * **Display-object buffering**: Each display-object is kept in a buffer until it fills\n * up or a flush is required.\n *\n * * **Geometry compositing**: The geometries of each display-object are merged together\n * in one interleaved composite geometry.\n *\n * * **Batch accumulation**: In a sliding window, display-object batches are generated based\n * off of certain constraints like GPU texture units and the uniforms used in each display-object.\n *\n * * **Rendering**: Each batch is rendered in-order using `gl.draw*`. The textures and\n * uniforms of each display-object are uploaded as arrays.\n *\n * ## Shaders\n *\n * ### Shader templates\n *\n * Since the max. display-object count per batch is not known until the WebGL context is created,\n * shaders are generated at runtime by processing shader templates. A shader templates has \"%macros%\"\n * that are replaced by constants at runtime.\n *\n * ### Textures\n *\n * The batch renderer uploads textures in the `uniform sampler2D uSamplers[%texturesPerBatch%];`. The\n * `varying float vTextureId` defines the index into this array that holds the current display-object's\n * texture.\n *\n * ### Uniforms\n *\n * This renderer currently does not support customized uniforms for display-objects. This is a\n * work-in-progress feature.\n *\n * @memberof PIXI.brend\n * @class\n * @extends PIXI.ObjectRenderer\n * @example\n * import * as PIXI from 'pixi.js';\n * import { BatchRendererPluginFactory } from 'pixi-batch-renderer';\n *\n * // Define the geometry of your display-object and create a BatchRenderer using\n * // BatchRendererPluginFactory. Register it as a plugin with PIXI.Renderer.\n * PIXI.Renderer.registerPlugin('ExampleBatchRenderer', BatchRendererPluginFactory.from(...));\n *\n * class ExampleObject extends PIXI.Container\n * {\n *     _render(renderer: PIXI.Renderer): void\n *     {\n *          // BatchRenderer will handle the whole rendering process for you!\n *          renderer.plugins['ExampleBatchRenderer'].render(this);\n *     }\n * }\n */\nexport class BatchRenderer extends PIXI.ObjectRenderer\n{\n    _attributeRedirects: AttributeRedirect[];\n    _indexProperty: string;\n    _vertexCountProperty: string | number;\n    _textureProperty: string;\n    _texturePerObject: number;\n    _textureAttribute: string;\n    _stateFunction: Function;\n    _shaderFunction: Function;\n\n    _BatchGeneratorClass: typeof BatchGenerator;\n    _batchGenerator: BatchGenerator;\n\n    _packer: GeometryPacker;\n    _geom: PIXI.Geometry;\n\n    _objectBuffer: PIXI.DisplayObject[];\n    _bufferedVertices: number;\n    _bufferedIndices: number;\n\n    _shader: PIXI.Shader;\n\n    _batchPool: Array<Batch>;\n    _batchCount: number;\n\n    MAX_TEXTURES: number;\n\n    /**\n     * Creates a batch renderer the renders display-objects with the described\n     * geometry.\n     *\n     * To register a batch-renderer plugin, you must use the API provided by\n     * `PIXI.brend.BatchRendererPluginFactory`.\n     *\n     * @param {PIXI.Renderer} renderer - renderer to attach to\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string | null} indexProperty\n     * @param {string | number} vertexCountProperty\n     * @param {string | null} textureProperty\n     * @param {number} texturePerObject\n     * @param {string} textureAttribute - name of texture-id attribute variable\n     * @param {Function} stateFunction - returns a {PIXI.State} for an object\n     * @param {Function} shaderFunction - generates a shader given this instance\n     * @param {PIXI.brend.GeometryPacker} [packer=new PIXI.brend.GeometryPacker]\n     * @param {Class} [BatchGeneratorClass=PIXI.brend.BatchGenerator]\n     * @see PIXI.brend.ShaderGenerator\n     */\n    constructor(// eslint-disable-line max-params\n        renderer: PIXI.Renderer,\n        attributeRedirects: AttributeRedirect[],\n        indexProperty: string,\n        vertexCountProperty: string | number,\n        textureProperty: string,\n        texturePerObject: number,\n        textureAttribute: string,\n        stateFunction: (renderer: BatchRenderer) => PIXI.State,\n        shaderFunction: (renderer: BatchRenderer) => PIXI.Shader,\n        packer = new GeometryPacker(\n            attributeRedirects,\n            indexProperty,\n            vertexCountProperty, // auto-calculate\n            undefined,\n            texturePerObject,\n        ),\n        BatchGeneratorClass = BatchGenerator,\n    )\n    {\n        super(renderer);\n\n        this._attributeRedirects = attributeRedirects;\n        this._indexProperty = indexProperty;\n        this._vertexCountProperty = vertexCountProperty;\n        this._textureProperty = textureProperty;\n        this._texturePerObject = texturePerObject;\n        this._textureAttribute = textureAttribute;\n        this._stateFunction = stateFunction;\n        this._shaderFunction = shaderFunction;\n\n        this._BatchGeneratorClass = BatchGeneratorClass;\n        this._batchGenerator = null;// @see this#contextChange\n\n        // Although the runners property is not a public API, it is required to\n        // handle contextChange events.\n        this.renderer.runners.contextChange.add(this);\n\n        // If the WebGL context has already been created, initialization requires a\n        // syntheic call to contextChange.\n        if (this.renderer.gl)\n        {\n            this.contextChange();\n        }\n\n        this._packer = packer;\n\n        this._geom = BatchRenderer.generateCompositeGeometry(\n            attributeRedirects,\n            !!indexProperty,\n            textureAttribute,\n            texturePerObject);\n\n        this._objectBuffer = [];\n        this._bufferedVertices = 0;\n        this._bufferedIndices = 0;\n        this._shader = null;\n\n        this._batchPool = [];// may contain garbage after _batchCount\n        this._batchCount = 0;\n    }\n\n    /**\n     * Internal method that is called whenever the renderer's WebGL context changes.\n     */\n    contextChange(): void\n    {\n        const gl = this.renderer.gl;\n\n        if (PIXI.settings.PREFER_ENV === PIXI.ENV.WEBGL_LEGACY)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            this.MAX_TEXTURES = Math.min(\n                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n                PIXI.settings.SPRITE_MAX_TEXTURES);\n        }\n\n        this._batchGenerator = new this._BatchGeneratorClass(\n            this._texturePerObject, this.MAX_TEXTURES,\n            this._textureProperty, true); // NOTE: Force texture reduction\n\n        if (!this._batchGenerator.enableTextureReduction)\n        {\n            throw new Error('PIXI.brend.BatchRenderer does not support '\n                    + 'batch generation without texture reduction enabled.');\n        }\n    }\n\n    /**\n     * This is an internal method. It ensures that the batch renderer is ready\n     * to start buffering display-objects. This is automatically invoked by the\n     * renderer's batch system.\n     *\n     * @override\n     */\n    start(): void\n    {\n        this._objectBuffer.length = 0;\n        this._bufferedVertices = 0;\n        this._bufferedIndices = 0;\n\n        this._shader = this._shaderFunction(this);\n\n        if (this._shader.uniforms.uSamplers)\n        {\n            this._shader.uniforms.uSamplers\n                = BatchRenderer.generateTextureArray(this.MAX_TEXTURES);\n        }\n\n        this.renderer.shader.bind(this._shader, false);\n    }\n\n    /**\n     * Adds the display-object to be rendered in a batch.\n     *\n     * @param {PIXI.DisplayObject} displayObject\n     * @override\n     */\n    render(displayObject: PIXI.DisplayObject): void\n    {\n        this._objectBuffer.push(displayObject);\n\n        this._bufferedVertices += this._vertexCountFor(displayObject);\n\n        if (this._indexProperty)\n        {\n            this._bufferedIndices += resolveConstantOrProperty(\n                displayObject, this._indexProperty).length;\n        }\n    }\n\n    /**\n     * Forces buffered display-objects to be rendered immediately. This should not\n     * be called unless absolutely necessary like the following scenarios:\n     *\n     * * before directly rendering your display-object, to preserve render-order.\n     *\n     * * to do a nested render pass (calling `Renderer#render` inside a `render` method)\n     *   because the PixiJS renderer is not re-entrant.\n     *\n     * @override\n     */\n    flush(): void\n    {\n        const {\n            _batchGenerator: batchGenerator,\n            _geom: geom,\n            _packer: packer,\n            renderer,\n            _stateFunction: stateFunction,\n            _textureProperty: textureProperty,\n            _texturePerObject: texturePerObject,\n        } = this;\n\n        const gl = renderer.gl;\n        const buffer = this._objectBuffer;\n        const bufferLength = buffer.length;\n\n        this._batchCount = 0;\n        packer.reset(this._bufferedVertices, this._bufferedIndices);\n\n        let batchStart = 0;\n\n        // Generate batches/groups that will be drawn using just\n        // one draw call.\n        for (let objectIndex = 0; objectIndex < bufferLength;)\n        {\n            const target = buffer[objectIndex];\n            const wasPut = batchGenerator.put(target,\n                resolveFunctionOrProperty(target, stateFunction));\n\n            if (!wasPut)\n            {\n                batchGenerator.finalize(this._newBatch(batchStart));\n                batchStart = objectIndex;\n            }\n            else\n            {\n                ++objectIndex;\n            }\n        }\n\n        // Generate the last batch, if required.\n        if (batchGenerator._batchBuffer.length !== 0)\n        {\n            batchGenerator.finalize(this._newBatch(batchStart));\n        }\n\n        // Pack each object into the composite geometry. This is done\n        // after batching, so that texture-ids are generated.\n        let textureId = this._texturePerObject === 1\n            ? 0\n            : new Array(texturePerObject);\n\n        for (let i = 0; i < this._batchCount; i++)// loop-per(batch)\n        {\n            const batch = this._batchPool[i];\n            const batchBuffer = batch.batchBuffer;\n            const batchLength = batchBuffer.length;\n            const uidMap = batch.uidMap;\n\n            let vertexCount = 0;// eslint-disable-line\n            let indexCount = 0;\n\n            for (let j = 0; j < batchLength; j++)// loop-per(targetObject)\n            {\n                const targetObject = batchBuffer[j];\n\n                if (this._indexProperty)\n                {\n                    indexCount += resolveConstantOrProperty(\n                        targetObject, this._indexProperty).length;\n                }\n                else\n                {\n                    vertexCount += resolveConstantOrProperty(\n                        targetObject, this._vertexCountProperty);\n                }\n\n                // externally-defined properties for draw calls\n                batch.$vertexCount = vertexCount;\n                batch.$indexCount = indexCount;\n\n                const tex = targetObject[textureProperty];\n\n                let texUID;\n\n                if (texturePerObject === 1)\n                {\n                    texUID = tex.baseTexture\n                        ? tex.baseTexture.uid\n                        : tex.uid;\n\n                    textureId = uidMap[texUID];\n                }\n                else\n                {\n                    let _tex;\n\n                    for (let k = 0; k < tex.length; k++)\n                    {\n                        _tex = tex[k];\n\n                        texUID = _tex.BaseTexture\n                            ? _tex.baseTexture.uid\n                            : _tex.uid;\n\n                        textureId[k] = uidMap[texUID];\n                    }\n                }\n\n                packer.pack(targetObject, textureId);\n            }\n        }\n\n        // Upload the geometry\n        geom.$buffer.update(packer.compositeAttributes.float32View);\n        geom.getIndex().update(packer.compositeIndices);\n        renderer.geometry.bind(geom);\n        renderer.geometry.updateBuffers();\n\n        // Now draw each batch\n        for (let i = 0; i < this._batchCount; i++)\n        {\n            const batch = this._batchPool[i];\n\n            batch.upload();\n\n            if (this._indexProperty)\n            {\n                gl.drawElements(gl.TRIANGLES,\n                    batch.$indexCount,\n                    gl.UNSIGNED_SHORT,\n                    batch.geometryOffset * 2);// * 2 cause Uint16 indices\n            }\n            else\n            {\n                gl.drawArrays(gl.TRIANGLES,\n                    batch.geometryOffset,\n                    batch.$vertexCount);// TODO: *vertexSize\n            }\n\n            batch.reset();\n        }\n    }\n\n    /**\n     * Internal method that stops buffering of display-objects and flushes any existing\n     * buffers.\n     *\n     * @override\n     */\n    stop(): void\n    {\n        if (this._bufferedVertices)\n        {\n            this.flush();\n        }\n    }\n\n    protected _newBatch(batchStart: number): Batch\n    {\n        if (this._batchCount === this._batchPool.length)\n        {\n            const batch = new Batch(batchStart);\n\n            this._batchPool.push(batch);\n            ++this._batchCount;\n\n            return batch;\n        }\n\n        const batch = this._batchPool[this._batchCount++];\n\n        batch.reset();\n        batch.geometryOffset = batchStart;\n\n        return batch;\n    }\n\n    protected _vertexCountFor(targetObject: PIXI.DisplayObject): number\n    {\n        return (this._vertexCountProperty)\n            ? resolveConstantOrProperty(targetObject, this._vertexCountProperty)\n            : resolveFunctionOrProperty(targetObject,\n                this._attributeRedirects[0].source).length\n                    / (this._attributeRedirects[0].size as number);\n    }\n\n    /**\n     * Constructs an interleaved geometry that can be used to upload a whole buffer\n     * of display-object primitives at once.\n     *\n     * @private\n     * @param {Array<PIXI.brend.AttributeRedirect>} attributeRedirects\n     * @param {boolean} hasIndex - whether to include an index property\n     * @param {string} textureAttribute - name of the texture-id attribute\n     * @param {number} texturePerObject - no. of textures per object\n     */\n    static generateCompositeGeometry(\n        attributeRedirects: AttributeRedirect[],\n        hasIndex: boolean,\n        textureAttribute: string,\n        texturePerObject: number,\n    ): PIXI.Geometry\n    {\n        const geom = new PIXI.Geometry();\n        const attributeBuffer = new PIXI.Buffer(null, false, false);\n        const indexBuffer = hasIndex ? new PIXI.Buffer(null, false, true) : null;\n\n        attributeRedirects.forEach((redirect) =>\n        {\n            const {\n                glslIdentifer, glType, glSize,\n                normalize,\n            } = redirect;\n\n            geom.addAttribute(glslIdentifer, attributeBuffer,\n                glSize, normalize, glType);\n        });\n\n        if (textureAttribute && texturePerObject > 0)\n        {\n            geom.addAttribute(textureAttribute, attributeBuffer,\n                texturePerObject, true, PIXI.TYPES.FLOAT);\n        }\n\n        if (hasIndex)\n        {\n            geom.addIndex(indexBuffer);\n        }\n\n        geom.$buffer = attributeBuffer;\n\n        // $buffer is attributeBuffer\n        // getIndex() is ?indexBuffer\n        return geom;\n    }\n\n    /**\n     * @private\n     * @param {number} count\n     */\n    static generateTextureArray(count: number): Int32Array\n    {\n        const array = new Int32Array(count);\n\n        for (let i = 0; i < count; i++)\n        {\n            array[i] = i;\n        }\n\n        return array;\n    }\n}\n\nexport default BatchRenderer;\n","import { BatchRenderer } from './BatchRenderer';\nimport { AttributeRedirect } from './redirects/AttributeRedirect';\nimport GeometryPacker from './GeometryPacker';\nimport BatchGenerator from './BatchGenerator';\n\n/**\n * Factory class for creating a batch-renderer.\n *\n * @memberof PIXI.brend\n * @class\n */\nexport class BatchRendererPluginFactory\n{\n    /**\n     * Generates a fully customized `BatchRenderer` that aggregates primitives\n     * and textures. This is useful for non-uniform based display-objects.\n     *\n     * @param {PIXI.brend.AttributeRedirect[]} attributeRedirects\n     * @param {string | Array<number>} indexProperty\n     * @param {string | number} vertexCountProperty\n     * @param {string} textureProperty\n     * @param {number} texturePerObject\n     * @param {string} textureAttribute\n     * @param {Function} stateFunction\n     * @param {Function} shaderFunction\n     * @param {PIXI.brend.GeometryPacker} [packer]\n     * @param {Class} [BatchGeneratorClass]\n     * @param {Class} [BatchRendererClass]\n     * @static\n     */\n    static from(/* eslint-disable-line max-params */\n        attributeRedirects: AttributeRedirect[],\n        indexProperty: string,\n        vertexCountProperty: string | number,\n        textureProperty: string,\n        texturePerObject: number,\n        textureAttribute: string,\n        stateFunction: (brend: BatchRenderer) => any,\n        shaderFunction: (brend: BatchRenderer) => any,\n        packer: GeometryPacker,\n        BatchGeneratorClass: typeof BatchGenerator,\n        BatchRendererClass = BatchRenderer,\n    ): typeof BatchRenderer\n    {\n        return class extends BatchRendererClass\n        {\n            constructor(renderer: PIXI.Renderer)\n            {\n                super(renderer,\n                    attributeRedirects,\n                    indexProperty,\n                    vertexCountProperty,\n                    textureProperty,\n                    texturePerObject,\n                    textureAttribute,\n                    stateFunction,\n                    shaderFunction,\n                    packer,\n                    BatchGeneratorClass);\n            }\n        };\n    }\n}\n\nexport default BatchRendererPluginFactory;\n","import * as PIXI from 'pixi.js';\nimport BatchRenderer from './BatchRenderer';\n\n// JavaScript is stupid enough not to have a replaceAll\n// in String. This is a temporary solution and we should\n// depend on an actually polyfill.\nfunction _replaceAll(target: string, search: string, replacement: string): string\n{\n    return target.replace(new RegExp(search, 'g'), replacement);\n}\n\nfunction injectTexturesPerBatch(batchRenderer: BatchRenderer): string\n{\n    return `${batchRenderer.MAX_TEXTURES}`;\n}\n\n/**\n * Exposes an easy-to-use API for generating a shader function\n * for batch rendering.\n *\n * You are required to provide an injector map, which maps\n * macros to functions that return a string value for those\n * macros given a renderer.\n *\n * By default, only one injector is used - the textures per\n * batch `%texturesPerBatch%` macro. This is replaced by\n * the number of textures passed to the `uSamplers` textures\n * uniform.\n *\n * @memberof PIXI.brend\n * @class\n */\nclass ShaderGenerator\n{\n    protected _vertexShaderTemplate: string;\n    protected _fragmentShaderTemplate: string;\n    protected _uniforms: any;\n    protected _templateInjectors: any;\n\n    protected disableVertexShaderTemplate: boolean;\n\n    protected _cache: any;\n    protected _cState: any;\n\n    /**\n     * WARNING: Do not pass `uSamplers` in your uniforms. They\n     *  will be added to your shader instance directly.\n     *\n     * @param {string} vertexShaderTemplate\n     * @param {string} fragmentShaderTemplate\n     * @param {UniformGroup | Map<string, object>} uniforms\n     * @param {Object.<String, PIXI.brend.InjectorFunction>} [templateInjectors]\n     * @param {boolean} [disableVertexShaderTemplate=true] - turn off (true)\n     *      if you aren't using macros in the vertex shader\n     */\n    constructor(\n        vertexShaderTemplate: string,\n        fragmentShaderTemplate: string,\n        uniforms = {},\n        templateInjectors = {\n            '%texturesPerBatch%': injectTexturesPerBatch,\n        },\n        disableVertexShaderTemplate = true,\n    )\n    {\n        if (!templateInjectors['%texturesPerBatch%'])\n        {\n            templateInjectors['%texturesPerBatch%'] = injectTexturesPerBatch;\n        }\n\n        /** @protected */\n        this._vertexShaderTemplate = vertexShaderTemplate;\n        /** @protected */\n        this._fragmentShaderTemplate = fragmentShaderTemplate;\n        /** @protected */\n        this._uniforms = uniforms;\n        /** @protected */\n        this._templateInjectors = templateInjectors;\n\n        /**\n         * Disable vertex shader templates to speed up shader\n         * generation.\n         *\n         * @member {Boolean}\n         */\n        this.disableVertexShaderTemplate = disableVertexShaderTemplate;\n\n        /**\n         * Maps the stringifed state of the batch renderer to the\n         * generated shader.\n         *\n         * @private\n         * @member {Object.<String, PIXI.Shader>}\n         */\n        this._cache = {};\n\n        /**\n         * Unstringifed current state of the batch renderer.\n         *\n         * @private\n         * @member {Object.<String, String>}\n         * @see {PIXI.brend.ShaderGenerator#_generateInjectorBasedState}\n         */\n        this._cState = null;\n    }\n\n    /**\n     * @return shader function that can be given to the batch renderer\n     */\n    generateFunction(): (brend: BatchRenderer) => PIXI.Shader\n    {\n        return (batchRenderer: BatchRenderer): PIXI.Shader =>\n        {\n            const stringState = this._generateInjectorBasedState(batchRenderer);\n            const cachedShader = this._cache[stringState];\n\n            if (cachedShader)\n            {\n                return cachedShader;\n            }\n\n            return this._generateShader(stringState);\n        };\n    }\n\n    protected _generateInjectorBasedState(batchRenderer: BatchRenderer): string\n    {\n        let state = '';\n        const cState = this._cState = {};\n\n        for (const injectorMacro in this._templateInjectors)\n        {\n            const val = this._templateInjectors[injectorMacro](batchRenderer);\n\n            state += val;\n            cState[injectorMacro] = val;\n        }\n\n        return state;\n    }\n\n    protected _generateShader(stringState: string): PIXI.Shader\n    {\n        let vertexShaderTemplate = this._vertexShaderTemplate.slice(0);\n\n        let fragmentShaderTemplate = this._fragmentShaderTemplate.slice(0);\n\n        for (const injectorTemplate in this._cState)\n        {\n            if (!this.disableVertexShaderTemplate)\n            {\n                vertexShaderTemplate = _replaceAll(vertexShaderTemplate,\n                    injectorTemplate, this._cState[injectorTemplate]);\n            }\n\n            fragmentShaderTemplate = _replaceAll(fragmentShaderTemplate,\n                injectorTemplate, this._cState[injectorTemplate]);\n        }\n\n        const shader = PIXI.Shader.from(vertexShaderTemplate,\n            fragmentShaderTemplate, this._uniforms);\n\n        this._cache[stringState] = shader;\n\n        return shader;\n    }\n}\n\nexport { ShaderGenerator };\nexport default ShaderGenerator;\n","/**\n * @namespace PIXI\n */\n/**\n * @namespace brend\n * @memberof PIXI\n */\n\nexport { AttributeRedirect } from './redirects/AttributeRedirect';\nexport { BatchGenerator } from './BatchGenerator';\nexport { BatchRenderer } from './BatchRenderer';\nexport { BatchRendererPluginFactory } from './BatchRendererPluginFactory';\nexport { GeometryPacker } from './GeometryPacker';\nexport { Redirect } from './redirects/Redirect';\nexport { ShaderGenerator } from './ShaderGenerator';\nexport { Batch } from './Batch';\n\n/**\n * This function type is used by `GeometryPacker#packerFunction`.\n *\n * It should add to this._aIndex and this._iIndex the number\n * of vertices and indices appended.\n *\n * @function\n * @name PackerFunction\n * @memberof PIXI.brend\n *\n * @param {PIXI.DisplayObject} targetObject - object to pack\n * @param {PIXI.ViewableBuffer} compositeAttributes\n * @param {Uint16Array} compositeIndices\n * @param {number} aIndex - Offset in the composite attribute buffer\n *      in bytes at which the object's geometry should be inserted.\n * @param {number} iIndex - Number of vertices already packed in the\n *      composite index buffer.\n * @param {Array<PIXI.brend.AttributeRedirect>} attributeRedirects\n * @return {void}\n * @see PIXI.brend.GeometryPacker#packerFunction\n */\n\n/**\n * @function\n * @name InjectorFunction\n * @memberof PIXI.brend\n *\n * @param {PIXI.brend.BatchRenderer} batchRenderer\n * @return {string} value of the macro for this renderer\n */\n"],"names":["PIXI.TYPES","PIXI.ViewableBuffer","PIXI.utils","PIXI.ObjectRenderer","PIXI.settings","PIXI.ENV","PIXI.Geometry","PIXI.Buffer","PIXI.Shader"],"mappings":"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"}